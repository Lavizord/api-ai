// Code generated by ent, DO NOT EDIT.

package addresses

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the addresses type in the database.
	Label = "addresses"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStreetName holds the string denoting the street_name field in the database.
	FieldStreetName = "street_name"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldFloor holds the string denoting the floor field in the database.
	FieldFloor = "floor"
	// FieldPostalCode holds the string denoting the postal_code field in the database.
	FieldPostalCode = "postal_code"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldInvoiceAddress holds the string denoting the invoice_address field in the database.
	FieldInvoiceAddress = "invoice_address"
	// FieldServiceAddress holds the string denoting the service_address field in the database.
	FieldServiceAddress = "service_address"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeContact holds the string denoting the contact edge name in mutations.
	EdgeContact = "contact"
	// Table holds the table name of the addresses in the database.
	Table = "addresses"
	// ContactTable is the table that holds the contact relation/edge.
	ContactTable = "addresses"
	// ContactInverseTable is the table name for the Contacts entity.
	// It exists in this package in order to avoid circular dependency with the "contacts" package.
	ContactInverseTable = "contacts"
	// ContactColumn is the table column denoting the contact relation/edge.
	ContactColumn = "contacts_addresses"
)

// Columns holds all SQL columns for addresses fields.
var Columns = []string{
	FieldID,
	FieldStreetName,
	FieldNumber,
	FieldFloor,
	FieldPostalCode,
	FieldCity,
	FieldInvoiceAddress,
	FieldServiceAddress,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"contacts_addresses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultInvoiceAddress holds the default value on creation for the "invoice_address" field.
	DefaultInvoiceAddress bool
	// DefaultServiceAddress holds the default value on creation for the "service_address" field.
	DefaultServiceAddress bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Addresses queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStreetName orders the results by the street_name field.
func ByStreetName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreetName, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByFloor orders the results by the floor field.
func ByFloor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloor, opts...).ToFunc()
}

// ByPostalCode orders the results by the postal_code field.
func ByPostalCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostalCode, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByInvoiceAddress orders the results by the invoice_address field.
func ByInvoiceAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceAddress, opts...).ToFunc()
}

// ByServiceAddress orders the results by the service_address field.
func ByServiceAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceAddress, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByContactField orders the results by contact field.
func ByContactField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactStep(), sql.OrderByField(field, opts...))
	}
}
func newContactStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContactTable, ContactColumn),
	)
}
