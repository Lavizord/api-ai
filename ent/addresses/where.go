// Code generated by ent, DO NOT EDIT.

package addresses

import (
	"api-ai/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Addresses {
	return predicate.Addresses(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Addresses {
	return predicate.Addresses(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Addresses {
	return predicate.Addresses(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Addresses {
	return predicate.Addresses(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Addresses {
	return predicate.Addresses(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Addresses {
	return predicate.Addresses(sql.FieldLTE(FieldID, id))
}

// StreetName applies equality check predicate on the "street_name" field. It's identical to StreetNameEQ.
func StreetName(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldStreetName, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldNumber, v))
}

// Floor applies equality check predicate on the "floor" field. It's identical to FloorEQ.
func Floor(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldFloor, v))
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldPostalCode, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldCity, v))
}

// InvoiceAddress applies equality check predicate on the "invoice_address" field. It's identical to InvoiceAddressEQ.
func InvoiceAddress(v bool) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldInvoiceAddress, v))
}

// ServiceAddress applies equality check predicate on the "service_address" field. It's identical to ServiceAddressEQ.
func ServiceAddress(v bool) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldServiceAddress, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldCreatedAt, v))
}

// StreetNameEQ applies the EQ predicate on the "street_name" field.
func StreetNameEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldStreetName, v))
}

// StreetNameNEQ applies the NEQ predicate on the "street_name" field.
func StreetNameNEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldStreetName, v))
}

// StreetNameIn applies the In predicate on the "street_name" field.
func StreetNameIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldIn(FieldStreetName, vs...))
}

// StreetNameNotIn applies the NotIn predicate on the "street_name" field.
func StreetNameNotIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNotIn(FieldStreetName, vs...))
}

// StreetNameGT applies the GT predicate on the "street_name" field.
func StreetNameGT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGT(FieldStreetName, v))
}

// StreetNameGTE applies the GTE predicate on the "street_name" field.
func StreetNameGTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGTE(FieldStreetName, v))
}

// StreetNameLT applies the LT predicate on the "street_name" field.
func StreetNameLT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLT(FieldStreetName, v))
}

// StreetNameLTE applies the LTE predicate on the "street_name" field.
func StreetNameLTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLTE(FieldStreetName, v))
}

// StreetNameContains applies the Contains predicate on the "street_name" field.
func StreetNameContains(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContains(FieldStreetName, v))
}

// StreetNameHasPrefix applies the HasPrefix predicate on the "street_name" field.
func StreetNameHasPrefix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasPrefix(FieldStreetName, v))
}

// StreetNameHasSuffix applies the HasSuffix predicate on the "street_name" field.
func StreetNameHasSuffix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasSuffix(FieldStreetName, v))
}

// StreetNameEqualFold applies the EqualFold predicate on the "street_name" field.
func StreetNameEqualFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEqualFold(FieldStreetName, v))
}

// StreetNameContainsFold applies the ContainsFold predicate on the "street_name" field.
func StreetNameContainsFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContainsFold(FieldStreetName, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLTE(FieldNumber, v))
}

// NumberContains applies the Contains predicate on the "number" field.
func NumberContains(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContains(FieldNumber, v))
}

// NumberHasPrefix applies the HasPrefix predicate on the "number" field.
func NumberHasPrefix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasPrefix(FieldNumber, v))
}

// NumberHasSuffix applies the HasSuffix predicate on the "number" field.
func NumberHasSuffix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasSuffix(FieldNumber, v))
}

// NumberEqualFold applies the EqualFold predicate on the "number" field.
func NumberEqualFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEqualFold(FieldNumber, v))
}

// NumberContainsFold applies the ContainsFold predicate on the "number" field.
func NumberContainsFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContainsFold(FieldNumber, v))
}

// FloorEQ applies the EQ predicate on the "floor" field.
func FloorEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldFloor, v))
}

// FloorNEQ applies the NEQ predicate on the "floor" field.
func FloorNEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldFloor, v))
}

// FloorIn applies the In predicate on the "floor" field.
func FloorIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldIn(FieldFloor, vs...))
}

// FloorNotIn applies the NotIn predicate on the "floor" field.
func FloorNotIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNotIn(FieldFloor, vs...))
}

// FloorGT applies the GT predicate on the "floor" field.
func FloorGT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGT(FieldFloor, v))
}

// FloorGTE applies the GTE predicate on the "floor" field.
func FloorGTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGTE(FieldFloor, v))
}

// FloorLT applies the LT predicate on the "floor" field.
func FloorLT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLT(FieldFloor, v))
}

// FloorLTE applies the LTE predicate on the "floor" field.
func FloorLTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLTE(FieldFloor, v))
}

// FloorContains applies the Contains predicate on the "floor" field.
func FloorContains(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContains(FieldFloor, v))
}

// FloorHasPrefix applies the HasPrefix predicate on the "floor" field.
func FloorHasPrefix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasPrefix(FieldFloor, v))
}

// FloorHasSuffix applies the HasSuffix predicate on the "floor" field.
func FloorHasSuffix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasSuffix(FieldFloor, v))
}

// FloorIsNil applies the IsNil predicate on the "floor" field.
func FloorIsNil() predicate.Addresses {
	return predicate.Addresses(sql.FieldIsNull(FieldFloor))
}

// FloorNotNil applies the NotNil predicate on the "floor" field.
func FloorNotNil() predicate.Addresses {
	return predicate.Addresses(sql.FieldNotNull(FieldFloor))
}

// FloorEqualFold applies the EqualFold predicate on the "floor" field.
func FloorEqualFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEqualFold(FieldFloor, v))
}

// FloorContainsFold applies the ContainsFold predicate on the "floor" field.
func FloorContainsFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContainsFold(FieldFloor, v))
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContainsFold(FieldPostalCode, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Addresses {
	return predicate.Addresses(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Addresses {
	return predicate.Addresses(sql.FieldContainsFold(FieldCity, v))
}

// InvoiceAddressEQ applies the EQ predicate on the "invoice_address" field.
func InvoiceAddressEQ(v bool) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldInvoiceAddress, v))
}

// InvoiceAddressNEQ applies the NEQ predicate on the "invoice_address" field.
func InvoiceAddressNEQ(v bool) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldInvoiceAddress, v))
}

// ServiceAddressEQ applies the EQ predicate on the "service_address" field.
func ServiceAddressEQ(v bool) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldServiceAddress, v))
}

// ServiceAddressNEQ applies the NEQ predicate on the "service_address" field.
func ServiceAddressNEQ(v bool) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldServiceAddress, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Addresses {
	return predicate.Addresses(sql.FieldLTE(FieldCreatedAt, v))
}

// HasContact applies the HasEdge predicate on the "contact" edge.
func HasContact() predicate.Addresses {
	return predicate.Addresses(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContactTable, ContactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactWith applies the HasEdge predicate on the "contact" edge with a given conditions (other predicates).
func HasContactWith(preds ...predicate.Contacts) predicate.Addresses {
	return predicate.Addresses(func(s *sql.Selector) {
		step := newContactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Addresses) predicate.Addresses {
	return predicate.Addresses(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Addresses) predicate.Addresses {
	return predicate.Addresses(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Addresses) predicate.Addresses {
	return predicate.Addresses(sql.NotPredicates(p))
}
