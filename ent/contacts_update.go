// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/addresses"
	"api-ai/ent/contacts"
	"api-ai/ent/files"
	"api-ai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactsUpdate is the builder for updating Contacts entities.
type ContactsUpdate struct {
	config
	hooks    []Hook
	mutation *ContactsMutation
}

// Where appends a list predicates to the ContactsUpdate builder.
func (cu *ContactsUpdate) Where(ps ...predicate.Contacts) *ContactsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ContactsUpdate) SetName(s string) *ContactsUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ContactsUpdate) SetNillableName(s *string) *ContactsUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetTelefone sets the "telefone" field.
func (cu *ContactsUpdate) SetTelefone(s string) *ContactsUpdate {
	cu.mutation.SetTelefone(s)
	return cu
}

// SetNillableTelefone sets the "telefone" field if the given value is not nil.
func (cu *ContactsUpdate) SetNillableTelefone(s *string) *ContactsUpdate {
	if s != nil {
		cu.SetTelefone(*s)
	}
	return cu
}

// SetEmail sets the "email" field.
func (cu *ContactsUpdate) SetEmail(s string) *ContactsUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *ContactsUpdate) SetNillableEmail(s *string) *ContactsUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// SetVat sets the "vat" field.
func (cu *ContactsUpdate) SetVat(s string) *ContactsUpdate {
	cu.mutation.SetVat(s)
	return cu
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (cu *ContactsUpdate) SetNillableVat(s *string) *ContactsUpdate {
	if s != nil {
		cu.SetVat(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *ContactsUpdate) SetType(s string) *ContactsUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ContactsUpdate) SetNillableType(s *string) *ContactsUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ContactsUpdate) SetCreatedAt(t time.Time) *ContactsUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ContactsUpdate) SetNillableCreatedAt(t *time.Time) *ContactsUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// AddAddressIDs adds the "addresses" edge to the Addresses entity by IDs.
func (cu *ContactsUpdate) AddAddressIDs(ids ...int) *ContactsUpdate {
	cu.mutation.AddAddressIDs(ids...)
	return cu
}

// AddAddresses adds the "addresses" edges to the Addresses entity.
func (cu *ContactsUpdate) AddAddresses(a ...*Addresses) *ContactsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAddressIDs(ids...)
}

// AddFileIDs adds the "files" edge to the Files entity by IDs.
func (cu *ContactsUpdate) AddFileIDs(ids ...int) *ContactsUpdate {
	cu.mutation.AddFileIDs(ids...)
	return cu
}

// AddFiles adds the "files" edges to the Files entity.
func (cu *ContactsUpdate) AddFiles(f ...*Files) *ContactsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.AddFileIDs(ids...)
}

// Mutation returns the ContactsMutation object of the builder.
func (cu *ContactsUpdate) Mutation() *ContactsMutation {
	return cu.mutation
}

// ClearAddresses clears all "addresses" edges to the Addresses entity.
func (cu *ContactsUpdate) ClearAddresses() *ContactsUpdate {
	cu.mutation.ClearAddresses()
	return cu
}

// RemoveAddressIDs removes the "addresses" edge to Addresses entities by IDs.
func (cu *ContactsUpdate) RemoveAddressIDs(ids ...int) *ContactsUpdate {
	cu.mutation.RemoveAddressIDs(ids...)
	return cu
}

// RemoveAddresses removes "addresses" edges to Addresses entities.
func (cu *ContactsUpdate) RemoveAddresses(a ...*Addresses) *ContactsUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAddressIDs(ids...)
}

// ClearFiles clears all "files" edges to the Files entity.
func (cu *ContactsUpdate) ClearFiles() *ContactsUpdate {
	cu.mutation.ClearFiles()
	return cu
}

// RemoveFileIDs removes the "files" edge to Files entities by IDs.
func (cu *ContactsUpdate) RemoveFileIDs(ids ...int) *ContactsUpdate {
	cu.mutation.RemoveFileIDs(ids...)
	return cu
}

// RemoveFiles removes "files" edges to Files entities.
func (cu *ContactsUpdate) RemoveFiles(f ...*Files) *ContactsUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContactsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ContactsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contacts.Table, contacts.Columns, sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(contacts.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Telefone(); ok {
		_spec.SetField(contacts.FieldTelefone, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(contacts.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Vat(); ok {
		_spec.SetField(contacts.FieldVat, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(contacts.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(contacts.FieldCreatedAt, field.TypeTime, value)
	}
	if cu.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contacts.AddressesTable,
			Columns: []string{contacts.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !cu.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contacts.AddressesTable,
			Columns: []string{contacts.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contacts.AddressesTable,
			Columns: []string{contacts.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contacts.FilesTable,
			Columns: contacts.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !cu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contacts.FilesTable,
			Columns: contacts.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contacts.FilesTable,
			Columns: contacts.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contacts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContactsUpdateOne is the builder for updating a single Contacts entity.
type ContactsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContactsMutation
}

// SetName sets the "name" field.
func (cuo *ContactsUpdateOne) SetName(s string) *ContactsUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ContactsUpdateOne) SetNillableName(s *string) *ContactsUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetTelefone sets the "telefone" field.
func (cuo *ContactsUpdateOne) SetTelefone(s string) *ContactsUpdateOne {
	cuo.mutation.SetTelefone(s)
	return cuo
}

// SetNillableTelefone sets the "telefone" field if the given value is not nil.
func (cuo *ContactsUpdateOne) SetNillableTelefone(s *string) *ContactsUpdateOne {
	if s != nil {
		cuo.SetTelefone(*s)
	}
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ContactsUpdateOne) SetEmail(s string) *ContactsUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *ContactsUpdateOne) SetNillableEmail(s *string) *ContactsUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// SetVat sets the "vat" field.
func (cuo *ContactsUpdateOne) SetVat(s string) *ContactsUpdateOne {
	cuo.mutation.SetVat(s)
	return cuo
}

// SetNillableVat sets the "vat" field if the given value is not nil.
func (cuo *ContactsUpdateOne) SetNillableVat(s *string) *ContactsUpdateOne {
	if s != nil {
		cuo.SetVat(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *ContactsUpdateOne) SetType(s string) *ContactsUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ContactsUpdateOne) SetNillableType(s *string) *ContactsUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ContactsUpdateOne) SetCreatedAt(t time.Time) *ContactsUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ContactsUpdateOne) SetNillableCreatedAt(t *time.Time) *ContactsUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// AddAddressIDs adds the "addresses" edge to the Addresses entity by IDs.
func (cuo *ContactsUpdateOne) AddAddressIDs(ids ...int) *ContactsUpdateOne {
	cuo.mutation.AddAddressIDs(ids...)
	return cuo
}

// AddAddresses adds the "addresses" edges to the Addresses entity.
func (cuo *ContactsUpdateOne) AddAddresses(a ...*Addresses) *ContactsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAddressIDs(ids...)
}

// AddFileIDs adds the "files" edge to the Files entity by IDs.
func (cuo *ContactsUpdateOne) AddFileIDs(ids ...int) *ContactsUpdateOne {
	cuo.mutation.AddFileIDs(ids...)
	return cuo
}

// AddFiles adds the "files" edges to the Files entity.
func (cuo *ContactsUpdateOne) AddFiles(f ...*Files) *ContactsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.AddFileIDs(ids...)
}

// Mutation returns the ContactsMutation object of the builder.
func (cuo *ContactsUpdateOne) Mutation() *ContactsMutation {
	return cuo.mutation
}

// ClearAddresses clears all "addresses" edges to the Addresses entity.
func (cuo *ContactsUpdateOne) ClearAddresses() *ContactsUpdateOne {
	cuo.mutation.ClearAddresses()
	return cuo
}

// RemoveAddressIDs removes the "addresses" edge to Addresses entities by IDs.
func (cuo *ContactsUpdateOne) RemoveAddressIDs(ids ...int) *ContactsUpdateOne {
	cuo.mutation.RemoveAddressIDs(ids...)
	return cuo
}

// RemoveAddresses removes "addresses" edges to Addresses entities.
func (cuo *ContactsUpdateOne) RemoveAddresses(a ...*Addresses) *ContactsUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAddressIDs(ids...)
}

// ClearFiles clears all "files" edges to the Files entity.
func (cuo *ContactsUpdateOne) ClearFiles() *ContactsUpdateOne {
	cuo.mutation.ClearFiles()
	return cuo
}

// RemoveFileIDs removes the "files" edge to Files entities by IDs.
func (cuo *ContactsUpdateOne) RemoveFileIDs(ids ...int) *ContactsUpdateOne {
	cuo.mutation.RemoveFileIDs(ids...)
	return cuo
}

// RemoveFiles removes "files" edges to Files entities.
func (cuo *ContactsUpdateOne) RemoveFiles(f ...*Files) *ContactsUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the ContactsUpdate builder.
func (cuo *ContactsUpdateOne) Where(ps ...predicate.Contacts) *ContactsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContactsUpdateOne) Select(field string, fields ...string) *ContactsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contacts entity.
func (cuo *ContactsUpdateOne) Save(ctx context.Context) (*Contacts, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactsUpdateOne) SaveX(ctx context.Context) *Contacts {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContactsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ContactsUpdateOne) sqlSave(ctx context.Context) (_node *Contacts, err error) {
	_spec := sqlgraph.NewUpdateSpec(contacts.Table, contacts.Columns, sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contacts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contacts.FieldID)
		for _, f := range fields {
			if !contacts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contacts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(contacts.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Telefone(); ok {
		_spec.SetField(contacts.FieldTelefone, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(contacts.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Vat(); ok {
		_spec.SetField(contacts.FieldVat, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(contacts.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(contacts.FieldCreatedAt, field.TypeTime, value)
	}
	if cuo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contacts.AddressesTable,
			Columns: []string{contacts.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !cuo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contacts.AddressesTable,
			Columns: []string{contacts.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contacts.AddressesTable,
			Columns: []string{contacts.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contacts.FilesTable,
			Columns: contacts.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !cuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contacts.FilesTable,
			Columns: contacts.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contacts.FilesTable,
			Columns: contacts.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Contacts{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contacts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
