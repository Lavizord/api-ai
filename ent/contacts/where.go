// Code generated by ent, DO NOT EDIT.

package contacts

import (
	"api-ai/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Contacts {
	return predicate.Contacts(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Contacts {
	return predicate.Contacts(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Contacts {
	return predicate.Contacts(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Contacts {
	return predicate.Contacts(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Contacts {
	return predicate.Contacts(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Contacts {
	return predicate.Contacts(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Contacts {
	return predicate.Contacts(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldName, v))
}

// Telefone applies equality check predicate on the "telefone" field. It's identical to TelefoneEQ.
func Telefone(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldTelefone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldEmail, v))
}

// Vat applies equality check predicate on the "vat" field. It's identical to VatEQ.
func Vat(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldVat, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContainsFold(FieldName, v))
}

// TelefoneEQ applies the EQ predicate on the "telefone" field.
func TelefoneEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldTelefone, v))
}

// TelefoneNEQ applies the NEQ predicate on the "telefone" field.
func TelefoneNEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNEQ(FieldTelefone, v))
}

// TelefoneIn applies the In predicate on the "telefone" field.
func TelefoneIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldIn(FieldTelefone, vs...))
}

// TelefoneNotIn applies the NotIn predicate on the "telefone" field.
func TelefoneNotIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNotIn(FieldTelefone, vs...))
}

// TelefoneGT applies the GT predicate on the "telefone" field.
func TelefoneGT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGT(FieldTelefone, v))
}

// TelefoneGTE applies the GTE predicate on the "telefone" field.
func TelefoneGTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGTE(FieldTelefone, v))
}

// TelefoneLT applies the LT predicate on the "telefone" field.
func TelefoneLT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLT(FieldTelefone, v))
}

// TelefoneLTE applies the LTE predicate on the "telefone" field.
func TelefoneLTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLTE(FieldTelefone, v))
}

// TelefoneContains applies the Contains predicate on the "telefone" field.
func TelefoneContains(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContains(FieldTelefone, v))
}

// TelefoneHasPrefix applies the HasPrefix predicate on the "telefone" field.
func TelefoneHasPrefix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasPrefix(FieldTelefone, v))
}

// TelefoneHasSuffix applies the HasSuffix predicate on the "telefone" field.
func TelefoneHasSuffix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasSuffix(FieldTelefone, v))
}

// TelefoneEqualFold applies the EqualFold predicate on the "telefone" field.
func TelefoneEqualFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEqualFold(FieldTelefone, v))
}

// TelefoneContainsFold applies the ContainsFold predicate on the "telefone" field.
func TelefoneContainsFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContainsFold(FieldTelefone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContainsFold(FieldEmail, v))
}

// VatEQ applies the EQ predicate on the "vat" field.
func VatEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldVat, v))
}

// VatNEQ applies the NEQ predicate on the "vat" field.
func VatNEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNEQ(FieldVat, v))
}

// VatIn applies the In predicate on the "vat" field.
func VatIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldIn(FieldVat, vs...))
}

// VatNotIn applies the NotIn predicate on the "vat" field.
func VatNotIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNotIn(FieldVat, vs...))
}

// VatGT applies the GT predicate on the "vat" field.
func VatGT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGT(FieldVat, v))
}

// VatGTE applies the GTE predicate on the "vat" field.
func VatGTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGTE(FieldVat, v))
}

// VatLT applies the LT predicate on the "vat" field.
func VatLT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLT(FieldVat, v))
}

// VatLTE applies the LTE predicate on the "vat" field.
func VatLTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLTE(FieldVat, v))
}

// VatContains applies the Contains predicate on the "vat" field.
func VatContains(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContains(FieldVat, v))
}

// VatHasPrefix applies the HasPrefix predicate on the "vat" field.
func VatHasPrefix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasPrefix(FieldVat, v))
}

// VatHasSuffix applies the HasSuffix predicate on the "vat" field.
func VatHasSuffix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasSuffix(FieldVat, v))
}

// VatEqualFold applies the EqualFold predicate on the "vat" field.
func VatEqualFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEqualFold(FieldVat, v))
}

// VatContainsFold applies the ContainsFold predicate on the "vat" field.
func VatContainsFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContainsFold(FieldVat, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Contacts {
	return predicate.Contacts(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Contacts {
	return predicate.Contacts(sql.FieldContainsFold(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Contacts {
	return predicate.Contacts(sql.FieldLTE(FieldCreatedAt, v))
}

// HasAddresses applies the HasEdge predicate on the "addresses" edge.
func HasAddresses() predicate.Contacts {
	return predicate.Contacts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressesTable, AddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressesWith applies the HasEdge predicate on the "addresses" edge with a given conditions (other predicates).
func HasAddressesWith(preds ...predicate.Addresses) predicate.Contacts {
	return predicate.Contacts(func(s *sql.Selector) {
		step := newAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Contacts {
	return predicate.Contacts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FilesTable, FilesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.Files) predicate.Contacts {
	return predicate.Contacts(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contacts) predicate.Contacts {
	return predicate.Contacts(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contacts) predicate.Contacts {
	return predicate.Contacts(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contacts) predicate.Contacts {
	return predicate.Contacts(sql.NotPredicates(p))
}
