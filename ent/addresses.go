// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/addresses"
	"api-ai/ent/contacts"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Addresses is the model entity for the Addresses schema.
type Addresses struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StreetName holds the value of the "street_name" field.
	StreetName string `json:"street_name,omitempty"`
	// Number holds the value of the "number" field.
	Number string `json:"number,omitempty"`
	// Floor holds the value of the "floor" field.
	Floor string `json:"floor,omitempty"`
	// PostalCode holds the value of the "postal_code" field.
	PostalCode string `json:"postal_code,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// InvoiceAddress holds the value of the "invoice_address" field.
	InvoiceAddress bool `json:"invoice_address,omitempty"`
	// ServiceAddress holds the value of the "service_address" field.
	ServiceAddress bool `json:"service_address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressesQuery when eager-loading is set.
	Edges              AddressesEdges `json:"edges"`
	contacts_addresses *int
	selectValues       sql.SelectValues
}

// AddressesEdges holds the relations/edges for other nodes in the graph.
type AddressesEdges struct {
	// Contact holds the value of the contact edge.
	Contact *Contacts `json:"contact,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContactOrErr returns the Contact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressesEdges) ContactOrErr() (*Contacts, error) {
	if e.Contact != nil {
		return e.Contact, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: contacts.Label}
	}
	return nil, &NotLoadedError{edge: "contact"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Addresses) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case addresses.FieldInvoiceAddress, addresses.FieldServiceAddress:
			values[i] = new(sql.NullBool)
		case addresses.FieldID:
			values[i] = new(sql.NullInt64)
		case addresses.FieldStreetName, addresses.FieldNumber, addresses.FieldFloor, addresses.FieldPostalCode, addresses.FieldCity:
			values[i] = new(sql.NullString)
		case addresses.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case addresses.ForeignKeys[0]: // contacts_addresses
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Addresses fields.
func (a *Addresses) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addresses.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case addresses.FieldStreetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_name", values[i])
			} else if value.Valid {
				a.StreetName = value.String
			}
		case addresses.FieldNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				a.Number = value.String
			}
		case addresses.FieldFloor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field floor", values[i])
			} else if value.Valid {
				a.Floor = value.String
			}
		case addresses.FieldPostalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postal_code", values[i])
			} else if value.Valid {
				a.PostalCode = value.String
			}
		case addresses.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				a.City = value.String
			}
		case addresses.FieldInvoiceAddress:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_address", values[i])
			} else if value.Valid {
				a.InvoiceAddress = value.Bool
			}
		case addresses.FieldServiceAddress:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field service_address", values[i])
			} else if value.Valid {
				a.ServiceAddress = value.Bool
			}
		case addresses.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case addresses.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contacts_addresses", value)
			} else if value.Valid {
				a.contacts_addresses = new(int)
				*a.contacts_addresses = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Addresses.
// This includes values selected through modifiers, order, etc.
func (a *Addresses) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryContact queries the "contact" edge of the Addresses entity.
func (a *Addresses) QueryContact() *ContactsQuery {
	return NewAddressesClient(a.config).QueryContact(a)
}

// Update returns a builder for updating this Addresses.
// Note that you need to call Addresses.Unwrap() before calling this method if this Addresses
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Addresses) Update() *AddressesUpdateOne {
	return NewAddressesClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Addresses entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Addresses) Unwrap() *Addresses {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Addresses is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Addresses) String() string {
	var builder strings.Builder
	builder.WriteString("Addresses(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("street_name=")
	builder.WriteString(a.StreetName)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(a.Number)
	builder.WriteString(", ")
	builder.WriteString("floor=")
	builder.WriteString(a.Floor)
	builder.WriteString(", ")
	builder.WriteString("postal_code=")
	builder.WriteString(a.PostalCode)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(a.City)
	builder.WriteString(", ")
	builder.WriteString("invoice_address=")
	builder.WriteString(fmt.Sprintf("%v", a.InvoiceAddress))
	builder.WriteString(", ")
	builder.WriteString("service_address=")
	builder.WriteString(fmt.Sprintf("%v", a.ServiceAddress))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AddressesSlice is a parsable slice of Addresses.
type AddressesSlice []*Addresses
