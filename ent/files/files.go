// Code generated by ent, DO NOT EDIT.

package files

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the files type in the database.
	Label = "files"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFileSource holds the string denoting the file_source field in the database.
	FieldFileSource = "file_source"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldFileURL holds the string denoting the file_url field in the database.
	FieldFileURL = "file_url"
	// FieldPromptUsed holds the string denoting the prompt_used field in the database.
	FieldPromptUsed = "prompt_used"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeContacts holds the string denoting the contacts edge name in mutations.
	EdgeContacts = "contacts"
	// Table holds the table name of the files in the database.
	Table = "files"
	// ContactsTable is the table that holds the contacts relation/edge. The primary key declared below.
	ContactsTable = "files_contacts"
	// ContactsInverseTable is the table name for the Contacts entity.
	// It exists in this package in order to avoid circular dependency with the "contacts" package.
	ContactsInverseTable = "contacts"
)

// Columns holds all SQL columns for files fields.
var Columns = []string{
	FieldID,
	FieldFileSource,
	FieldFileName,
	FieldFileURL,
	FieldPromptUsed,
	FieldCreatedAt,
	FieldType,
}

var (
	// ContactsPrimaryKey and ContactsColumn2 are the table columns denoting the
	// primary key for the contacts relation (M2M).
	ContactsPrimaryKey = []string{"files_id", "contacts_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Files queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFileSource orders the results by the file_source field.
func ByFileSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSource, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByFileURL orders the results by the file_url field.
func ByFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileURL, opts...).ToFunc()
}

// ByPromptUsed orders the results by the prompt_used field.
func ByPromptUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPromptUsed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByContactsCount orders the results by contacts count.
func ByContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactsStep(), opts...)
	}
}

// ByContacts orders the results by contacts terms.
func ByContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ContactsTable, ContactsPrimaryKey...),
	)
}
