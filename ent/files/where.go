// Code generated by ent, DO NOT EDIT.

package files

import (
	"api-ai/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Files {
	return predicate.Files(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Files {
	return predicate.Files(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Files {
	return predicate.Files(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Files {
	return predicate.Files(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Files {
	return predicate.Files(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Files {
	return predicate.Files(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Files {
	return predicate.Files(sql.FieldLTE(FieldID, id))
}

// FileSource applies equality check predicate on the "file_source" field. It's identical to FileSourceEQ.
func FileSource(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldFileSource, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldFileName, v))
}

// FileURL applies equality check predicate on the "file_url" field. It's identical to FileURLEQ.
func FileURL(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldFileURL, v))
}

// PromptUsed applies equality check predicate on the "prompt_used" field. It's identical to PromptUsedEQ.
func PromptUsed(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldPromptUsed, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldCreatedAt, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldType, v))
}

// FileSourceEQ applies the EQ predicate on the "file_source" field.
func FileSourceEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldFileSource, v))
}

// FileSourceNEQ applies the NEQ predicate on the "file_source" field.
func FileSourceNEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldNEQ(FieldFileSource, v))
}

// FileSourceIn applies the In predicate on the "file_source" field.
func FileSourceIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldIn(FieldFileSource, vs...))
}

// FileSourceNotIn applies the NotIn predicate on the "file_source" field.
func FileSourceNotIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldNotIn(FieldFileSource, vs...))
}

// FileSourceGT applies the GT predicate on the "file_source" field.
func FileSourceGT(v string) predicate.Files {
	return predicate.Files(sql.FieldGT(FieldFileSource, v))
}

// FileSourceGTE applies the GTE predicate on the "file_source" field.
func FileSourceGTE(v string) predicate.Files {
	return predicate.Files(sql.FieldGTE(FieldFileSource, v))
}

// FileSourceLT applies the LT predicate on the "file_source" field.
func FileSourceLT(v string) predicate.Files {
	return predicate.Files(sql.FieldLT(FieldFileSource, v))
}

// FileSourceLTE applies the LTE predicate on the "file_source" field.
func FileSourceLTE(v string) predicate.Files {
	return predicate.Files(sql.FieldLTE(FieldFileSource, v))
}

// FileSourceContains applies the Contains predicate on the "file_source" field.
func FileSourceContains(v string) predicate.Files {
	return predicate.Files(sql.FieldContains(FieldFileSource, v))
}

// FileSourceHasPrefix applies the HasPrefix predicate on the "file_source" field.
func FileSourceHasPrefix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasPrefix(FieldFileSource, v))
}

// FileSourceHasSuffix applies the HasSuffix predicate on the "file_source" field.
func FileSourceHasSuffix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasSuffix(FieldFileSource, v))
}

// FileSourceEqualFold applies the EqualFold predicate on the "file_source" field.
func FileSourceEqualFold(v string) predicate.Files {
	return predicate.Files(sql.FieldEqualFold(FieldFileSource, v))
}

// FileSourceContainsFold applies the ContainsFold predicate on the "file_source" field.
func FileSourceContainsFold(v string) predicate.Files {
	return predicate.Files(sql.FieldContainsFold(FieldFileSource, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.Files {
	return predicate.Files(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.Files {
	return predicate.Files(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.Files {
	return predicate.Files(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.Files {
	return predicate.Files(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.Files {
	return predicate.Files(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.Files {
	return predicate.Files(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.Files {
	return predicate.Files(sql.FieldContainsFold(FieldFileName, v))
}

// FileURLEQ applies the EQ predicate on the "file_url" field.
func FileURLEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldFileURL, v))
}

// FileURLNEQ applies the NEQ predicate on the "file_url" field.
func FileURLNEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldNEQ(FieldFileURL, v))
}

// FileURLIn applies the In predicate on the "file_url" field.
func FileURLIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldIn(FieldFileURL, vs...))
}

// FileURLNotIn applies the NotIn predicate on the "file_url" field.
func FileURLNotIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldNotIn(FieldFileURL, vs...))
}

// FileURLGT applies the GT predicate on the "file_url" field.
func FileURLGT(v string) predicate.Files {
	return predicate.Files(sql.FieldGT(FieldFileURL, v))
}

// FileURLGTE applies the GTE predicate on the "file_url" field.
func FileURLGTE(v string) predicate.Files {
	return predicate.Files(sql.FieldGTE(FieldFileURL, v))
}

// FileURLLT applies the LT predicate on the "file_url" field.
func FileURLLT(v string) predicate.Files {
	return predicate.Files(sql.FieldLT(FieldFileURL, v))
}

// FileURLLTE applies the LTE predicate on the "file_url" field.
func FileURLLTE(v string) predicate.Files {
	return predicate.Files(sql.FieldLTE(FieldFileURL, v))
}

// FileURLContains applies the Contains predicate on the "file_url" field.
func FileURLContains(v string) predicate.Files {
	return predicate.Files(sql.FieldContains(FieldFileURL, v))
}

// FileURLHasPrefix applies the HasPrefix predicate on the "file_url" field.
func FileURLHasPrefix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasPrefix(FieldFileURL, v))
}

// FileURLHasSuffix applies the HasSuffix predicate on the "file_url" field.
func FileURLHasSuffix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasSuffix(FieldFileURL, v))
}

// FileURLIsNil applies the IsNil predicate on the "file_url" field.
func FileURLIsNil() predicate.Files {
	return predicate.Files(sql.FieldIsNull(FieldFileURL))
}

// FileURLNotNil applies the NotNil predicate on the "file_url" field.
func FileURLNotNil() predicate.Files {
	return predicate.Files(sql.FieldNotNull(FieldFileURL))
}

// FileURLEqualFold applies the EqualFold predicate on the "file_url" field.
func FileURLEqualFold(v string) predicate.Files {
	return predicate.Files(sql.FieldEqualFold(FieldFileURL, v))
}

// FileURLContainsFold applies the ContainsFold predicate on the "file_url" field.
func FileURLContainsFold(v string) predicate.Files {
	return predicate.Files(sql.FieldContainsFold(FieldFileURL, v))
}

// PromptUsedEQ applies the EQ predicate on the "prompt_used" field.
func PromptUsedEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldPromptUsed, v))
}

// PromptUsedNEQ applies the NEQ predicate on the "prompt_used" field.
func PromptUsedNEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldNEQ(FieldPromptUsed, v))
}

// PromptUsedIn applies the In predicate on the "prompt_used" field.
func PromptUsedIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldIn(FieldPromptUsed, vs...))
}

// PromptUsedNotIn applies the NotIn predicate on the "prompt_used" field.
func PromptUsedNotIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldNotIn(FieldPromptUsed, vs...))
}

// PromptUsedGT applies the GT predicate on the "prompt_used" field.
func PromptUsedGT(v string) predicate.Files {
	return predicate.Files(sql.FieldGT(FieldPromptUsed, v))
}

// PromptUsedGTE applies the GTE predicate on the "prompt_used" field.
func PromptUsedGTE(v string) predicate.Files {
	return predicate.Files(sql.FieldGTE(FieldPromptUsed, v))
}

// PromptUsedLT applies the LT predicate on the "prompt_used" field.
func PromptUsedLT(v string) predicate.Files {
	return predicate.Files(sql.FieldLT(FieldPromptUsed, v))
}

// PromptUsedLTE applies the LTE predicate on the "prompt_used" field.
func PromptUsedLTE(v string) predicate.Files {
	return predicate.Files(sql.FieldLTE(FieldPromptUsed, v))
}

// PromptUsedContains applies the Contains predicate on the "prompt_used" field.
func PromptUsedContains(v string) predicate.Files {
	return predicate.Files(sql.FieldContains(FieldPromptUsed, v))
}

// PromptUsedHasPrefix applies the HasPrefix predicate on the "prompt_used" field.
func PromptUsedHasPrefix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasPrefix(FieldPromptUsed, v))
}

// PromptUsedHasSuffix applies the HasSuffix predicate on the "prompt_used" field.
func PromptUsedHasSuffix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasSuffix(FieldPromptUsed, v))
}

// PromptUsedEqualFold applies the EqualFold predicate on the "prompt_used" field.
func PromptUsedEqualFold(v string) predicate.Files {
	return predicate.Files(sql.FieldEqualFold(FieldPromptUsed, v))
}

// PromptUsedContainsFold applies the ContainsFold predicate on the "prompt_used" field.
func PromptUsedContainsFold(v string) predicate.Files {
	return predicate.Files(sql.FieldContainsFold(FieldPromptUsed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Files {
	return predicate.Files(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Files {
	return predicate.Files(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Files {
	return predicate.Files(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Files {
	return predicate.Files(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Files {
	return predicate.Files(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Files {
	return predicate.Files(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Files {
	return predicate.Files(sql.FieldLTE(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Files {
	return predicate.Files(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Files {
	return predicate.Files(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Files {
	return predicate.Files(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Files {
	return predicate.Files(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Files {
	return predicate.Files(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Files {
	return predicate.Files(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Files {
	return predicate.Files(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Files {
	return predicate.Files(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Files {
	return predicate.Files(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Files {
	return predicate.Files(sql.FieldContainsFold(FieldType, v))
}

// HasContacts applies the HasEdge predicate on the "contacts" edge.
func HasContacts() predicate.Files {
	return predicate.Files(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ContactsTable, ContactsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactsWith applies the HasEdge predicate on the "contacts" edge with a given conditions (other predicates).
func HasContactsWith(preds ...predicate.Contacts) predicate.Files {
	return predicate.Files(func(s *sql.Selector) {
		step := newContactsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Files) predicate.Files {
	return predicate.Files(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Files) predicate.Files {
	return predicate.Files(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Files) predicate.Files {
	return predicate.Files(sql.NotPredicates(p))
}
