// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/contacts"
	"api-ai/ent/files"
	"api-ai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilesUpdate is the builder for updating Files entities.
type FilesUpdate struct {
	config
	hooks    []Hook
	mutation *FilesMutation
}

// Where appends a list predicates to the FilesUpdate builder.
func (fu *FilesUpdate) Where(ps ...predicate.Files) *FilesUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetFileSource sets the "file_source" field.
func (fu *FilesUpdate) SetFileSource(s string) *FilesUpdate {
	fu.mutation.SetFileSource(s)
	return fu
}

// SetNillableFileSource sets the "file_source" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableFileSource(s *string) *FilesUpdate {
	if s != nil {
		fu.SetFileSource(*s)
	}
	return fu
}

// SetFileName sets the "file_name" field.
func (fu *FilesUpdate) SetFileName(s string) *FilesUpdate {
	fu.mutation.SetFileName(s)
	return fu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableFileName(s *string) *FilesUpdate {
	if s != nil {
		fu.SetFileName(*s)
	}
	return fu
}

// SetFileURL sets the "file_url" field.
func (fu *FilesUpdate) SetFileURL(s string) *FilesUpdate {
	fu.mutation.SetFileURL(s)
	return fu
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableFileURL(s *string) *FilesUpdate {
	if s != nil {
		fu.SetFileURL(*s)
	}
	return fu
}

// ClearFileURL clears the value of the "file_url" field.
func (fu *FilesUpdate) ClearFileURL() *FilesUpdate {
	fu.mutation.ClearFileURL()
	return fu
}

// SetPromptUsed sets the "prompt_used" field.
func (fu *FilesUpdate) SetPromptUsed(s string) *FilesUpdate {
	fu.mutation.SetPromptUsed(s)
	return fu
}

// SetNillablePromptUsed sets the "prompt_used" field if the given value is not nil.
func (fu *FilesUpdate) SetNillablePromptUsed(s *string) *FilesUpdate {
	if s != nil {
		fu.SetPromptUsed(*s)
	}
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FilesUpdate) SetCreatedAt(t time.Time) *FilesUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableCreatedAt(t *time.Time) *FilesUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetType sets the "type" field.
func (fu *FilesUpdate) SetType(s string) *FilesUpdate {
	fu.mutation.SetType(s)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FilesUpdate) SetNillableType(s *string) *FilesUpdate {
	if s != nil {
		fu.SetType(*s)
	}
	return fu
}

// AddContactIDs adds the "contacts" edge to the Contacts entity by IDs.
func (fu *FilesUpdate) AddContactIDs(ids ...int) *FilesUpdate {
	fu.mutation.AddContactIDs(ids...)
	return fu
}

// AddContacts adds the "contacts" edges to the Contacts entity.
func (fu *FilesUpdate) AddContacts(c ...*Contacts) *FilesUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.AddContactIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fu *FilesUpdate) Mutation() *FilesMutation {
	return fu.mutation
}

// ClearContacts clears all "contacts" edges to the Contacts entity.
func (fu *FilesUpdate) ClearContacts() *FilesUpdate {
	fu.mutation.ClearContacts()
	return fu
}

// RemoveContactIDs removes the "contacts" edge to Contacts entities by IDs.
func (fu *FilesUpdate) RemoveContactIDs(ids ...int) *FilesUpdate {
	fu.mutation.RemoveContactIDs(ids...)
	return fu
}

// RemoveContacts removes "contacts" edges to Contacts entities.
func (fu *FilesUpdate) RemoveContacts(c ...*Contacts) *FilesUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.RemoveContactIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FilesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilesUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilesUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilesUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FilesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(files.Table, files.Columns, sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FileSource(); ok {
		_spec.SetField(files.FieldFileSource, field.TypeString, value)
	}
	if value, ok := fu.mutation.FileName(); ok {
		_spec.SetField(files.FieldFileName, field.TypeString, value)
	}
	if value, ok := fu.mutation.FileURL(); ok {
		_spec.SetField(files.FieldFileURL, field.TypeString, value)
	}
	if fu.mutation.FileURLCleared() {
		_spec.ClearField(files.FieldFileURL, field.TypeString)
	}
	if value, ok := fu.mutation.PromptUsed(); ok {
		_spec.SetField(files.FieldPromptUsed, field.TypeString, value)
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(files.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(files.FieldType, field.TypeString, value)
	}
	if fu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.ContactsTable,
			Columns: files.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !fu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.ContactsTable,
			Columns: files.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.ContactsTable,
			Columns: files.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{files.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FilesUpdateOne is the builder for updating a single Files entity.
type FilesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilesMutation
}

// SetFileSource sets the "file_source" field.
func (fuo *FilesUpdateOne) SetFileSource(s string) *FilesUpdateOne {
	fuo.mutation.SetFileSource(s)
	return fuo
}

// SetNillableFileSource sets the "file_source" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableFileSource(s *string) *FilesUpdateOne {
	if s != nil {
		fuo.SetFileSource(*s)
	}
	return fuo
}

// SetFileName sets the "file_name" field.
func (fuo *FilesUpdateOne) SetFileName(s string) *FilesUpdateOne {
	fuo.mutation.SetFileName(s)
	return fuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableFileName(s *string) *FilesUpdateOne {
	if s != nil {
		fuo.SetFileName(*s)
	}
	return fuo
}

// SetFileURL sets the "file_url" field.
func (fuo *FilesUpdateOne) SetFileURL(s string) *FilesUpdateOne {
	fuo.mutation.SetFileURL(s)
	return fuo
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableFileURL(s *string) *FilesUpdateOne {
	if s != nil {
		fuo.SetFileURL(*s)
	}
	return fuo
}

// ClearFileURL clears the value of the "file_url" field.
func (fuo *FilesUpdateOne) ClearFileURL() *FilesUpdateOne {
	fuo.mutation.ClearFileURL()
	return fuo
}

// SetPromptUsed sets the "prompt_used" field.
func (fuo *FilesUpdateOne) SetPromptUsed(s string) *FilesUpdateOne {
	fuo.mutation.SetPromptUsed(s)
	return fuo
}

// SetNillablePromptUsed sets the "prompt_used" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillablePromptUsed(s *string) *FilesUpdateOne {
	if s != nil {
		fuo.SetPromptUsed(*s)
	}
	return fuo
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FilesUpdateOne) SetCreatedAt(t time.Time) *FilesUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableCreatedAt(t *time.Time) *FilesUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetType sets the "type" field.
func (fuo *FilesUpdateOne) SetType(s string) *FilesUpdateOne {
	fuo.mutation.SetType(s)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FilesUpdateOne) SetNillableType(s *string) *FilesUpdateOne {
	if s != nil {
		fuo.SetType(*s)
	}
	return fuo
}

// AddContactIDs adds the "contacts" edge to the Contacts entity by IDs.
func (fuo *FilesUpdateOne) AddContactIDs(ids ...int) *FilesUpdateOne {
	fuo.mutation.AddContactIDs(ids...)
	return fuo
}

// AddContacts adds the "contacts" edges to the Contacts entity.
func (fuo *FilesUpdateOne) AddContacts(c ...*Contacts) *FilesUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.AddContactIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fuo *FilesUpdateOne) Mutation() *FilesMutation {
	return fuo.mutation
}

// ClearContacts clears all "contacts" edges to the Contacts entity.
func (fuo *FilesUpdateOne) ClearContacts() *FilesUpdateOne {
	fuo.mutation.ClearContacts()
	return fuo
}

// RemoveContactIDs removes the "contacts" edge to Contacts entities by IDs.
func (fuo *FilesUpdateOne) RemoveContactIDs(ids ...int) *FilesUpdateOne {
	fuo.mutation.RemoveContactIDs(ids...)
	return fuo
}

// RemoveContacts removes "contacts" edges to Contacts entities.
func (fuo *FilesUpdateOne) RemoveContacts(c ...*Contacts) *FilesUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.RemoveContactIDs(ids...)
}

// Where appends a list predicates to the FilesUpdate builder.
func (fuo *FilesUpdateOne) Where(ps ...predicate.Files) *FilesUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FilesUpdateOne) Select(field string, fields ...string) *FilesUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Files entity.
func (fuo *FilesUpdateOne) Save(ctx context.Context) (*Files, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilesUpdateOne) SaveX(ctx context.Context) *Files {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FilesUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilesUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FilesUpdateOne) sqlSave(ctx context.Context) (_node *Files, err error) {
	_spec := sqlgraph.NewUpdateSpec(files.Table, files.Columns, sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Files.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, files.FieldID)
		for _, f := range fields {
			if !files.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != files.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.FileSource(); ok {
		_spec.SetField(files.FieldFileSource, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FileName(); ok {
		_spec.SetField(files.FieldFileName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FileURL(); ok {
		_spec.SetField(files.FieldFileURL, field.TypeString, value)
	}
	if fuo.mutation.FileURLCleared() {
		_spec.ClearField(files.FieldFileURL, field.TypeString)
	}
	if value, ok := fuo.mutation.PromptUsed(); ok {
		_spec.SetField(files.FieldPromptUsed, field.TypeString, value)
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(files.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(files.FieldType, field.TypeString, value)
	}
	if fuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.ContactsTable,
			Columns: files.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !fuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.ContactsTable,
			Columns: files.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.ContactsTable,
			Columns: files.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Files{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{files.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
