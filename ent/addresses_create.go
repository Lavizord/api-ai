// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/addresses"
	"api-ai/ent/contacts"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressesCreate is the builder for creating a Addresses entity.
type AddressesCreate struct {
	config
	mutation *AddressesMutation
	hooks    []Hook
}

// SetStreetName sets the "street_name" field.
func (ac *AddressesCreate) SetStreetName(s string) *AddressesCreate {
	ac.mutation.SetStreetName(s)
	return ac
}

// SetNumber sets the "number" field.
func (ac *AddressesCreate) SetNumber(s string) *AddressesCreate {
	ac.mutation.SetNumber(s)
	return ac
}

// SetFloor sets the "floor" field.
func (ac *AddressesCreate) SetFloor(s string) *AddressesCreate {
	ac.mutation.SetFloor(s)
	return ac
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (ac *AddressesCreate) SetNillableFloor(s *string) *AddressesCreate {
	if s != nil {
		ac.SetFloor(*s)
	}
	return ac
}

// SetPostalCode sets the "postal_code" field.
func (ac *AddressesCreate) SetPostalCode(s string) *AddressesCreate {
	ac.mutation.SetPostalCode(s)
	return ac
}

// SetCity sets the "city" field.
func (ac *AddressesCreate) SetCity(s string) *AddressesCreate {
	ac.mutation.SetCity(s)
	return ac
}

// SetInvoiceAddress sets the "invoice_address" field.
func (ac *AddressesCreate) SetInvoiceAddress(b bool) *AddressesCreate {
	ac.mutation.SetInvoiceAddress(b)
	return ac
}

// SetNillableInvoiceAddress sets the "invoice_address" field if the given value is not nil.
func (ac *AddressesCreate) SetNillableInvoiceAddress(b *bool) *AddressesCreate {
	if b != nil {
		ac.SetInvoiceAddress(*b)
	}
	return ac
}

// SetServiceAddress sets the "service_address" field.
func (ac *AddressesCreate) SetServiceAddress(b bool) *AddressesCreate {
	ac.mutation.SetServiceAddress(b)
	return ac
}

// SetNillableServiceAddress sets the "service_address" field if the given value is not nil.
func (ac *AddressesCreate) SetNillableServiceAddress(b *bool) *AddressesCreate {
	if b != nil {
		ac.SetServiceAddress(*b)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AddressesCreate) SetCreatedAt(t time.Time) *AddressesCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AddressesCreate) SetNillableCreatedAt(t *time.Time) *AddressesCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetContactID sets the "contact" edge to the Contacts entity by ID.
func (ac *AddressesCreate) SetContactID(id int) *AddressesCreate {
	ac.mutation.SetContactID(id)
	return ac
}

// SetContact sets the "contact" edge to the Contacts entity.
func (ac *AddressesCreate) SetContact(c *Contacts) *AddressesCreate {
	return ac.SetContactID(c.ID)
}

// Mutation returns the AddressesMutation object of the builder.
func (ac *AddressesCreate) Mutation() *AddressesMutation {
	return ac.mutation
}

// Save creates the Addresses in the database.
func (ac *AddressesCreate) Save(ctx context.Context) (*Addresses, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressesCreate) SaveX(ctx context.Context) *Addresses {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressesCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressesCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddressesCreate) defaults() {
	if _, ok := ac.mutation.InvoiceAddress(); !ok {
		v := addresses.DefaultInvoiceAddress
		ac.mutation.SetInvoiceAddress(v)
	}
	if _, ok := ac.mutation.ServiceAddress(); !ok {
		v := addresses.DefaultServiceAddress
		ac.mutation.SetServiceAddress(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := addresses.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressesCreate) check() error {
	if _, ok := ac.mutation.StreetName(); !ok {
		return &ValidationError{Name: "street_name", err: errors.New(`ent: missing required field "Addresses.street_name"`)}
	}
	if _, ok := ac.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Addresses.number"`)}
	}
	if _, ok := ac.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "Addresses.postal_code"`)}
	}
	if _, ok := ac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Addresses.city"`)}
	}
	if _, ok := ac.mutation.InvoiceAddress(); !ok {
		return &ValidationError{Name: "invoice_address", err: errors.New(`ent: missing required field "Addresses.invoice_address"`)}
	}
	if _, ok := ac.mutation.ServiceAddress(); !ok {
		return &ValidationError{Name: "service_address", err: errors.New(`ent: missing required field "Addresses.service_address"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Addresses.created_at"`)}
	}
	if len(ac.mutation.ContactIDs()) == 0 {
		return &ValidationError{Name: "contact", err: errors.New(`ent: missing required edge "Addresses.contact"`)}
	}
	return nil
}

func (ac *AddressesCreate) sqlSave(ctx context.Context) (*Addresses, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressesCreate) createSpec() (*Addresses, *sqlgraph.CreateSpec) {
	var (
		_node = &Addresses{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(addresses.Table, sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.StreetName(); ok {
		_spec.SetField(addresses.FieldStreetName, field.TypeString, value)
		_node.StreetName = value
	}
	if value, ok := ac.mutation.Number(); ok {
		_spec.SetField(addresses.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if value, ok := ac.mutation.Floor(); ok {
		_spec.SetField(addresses.FieldFloor, field.TypeString, value)
		_node.Floor = value
	}
	if value, ok := ac.mutation.PostalCode(); ok {
		_spec.SetField(addresses.FieldPostalCode, field.TypeString, value)
		_node.PostalCode = value
	}
	if value, ok := ac.mutation.City(); ok {
		_spec.SetField(addresses.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ac.mutation.InvoiceAddress(); ok {
		_spec.SetField(addresses.FieldInvoiceAddress, field.TypeBool, value)
		_node.InvoiceAddress = value
	}
	if value, ok := ac.mutation.ServiceAddress(); ok {
		_spec.SetField(addresses.FieldServiceAddress, field.TypeBool, value)
		_node.ServiceAddress = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(addresses.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ac.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addresses.ContactTable,
			Columns: []string{addresses.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contacts_addresses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AddressesCreateBulk is the builder for creating many Addresses entities in bulk.
type AddressesCreateBulk struct {
	config
	err      error
	builders []*AddressesCreate
}

// Save creates the Addresses entities in the database.
func (acb *AddressesCreateBulk) Save(ctx context.Context) ([]*Addresses, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Addresses, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressesCreateBulk) SaveX(ctx context.Context) []*Addresses {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressesCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressesCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
