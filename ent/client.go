// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"api-ai/ent/migrate"

	"api-ai/ent/addresses"
	"api-ai/ent/contacts"
	"api-ai/ent/files"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Addresses is the client for interacting with the Addresses builders.
	Addresses *AddressesClient
	// Contacts is the client for interacting with the Contacts builders.
	Contacts *ContactsClient
	// Files is the client for interacting with the Files builders.
	Files *FilesClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Addresses = NewAddressesClient(c.config)
	c.Contacts = NewContactsClient(c.config)
	c.Files = NewFilesClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Addresses: NewAddressesClient(cfg),
		Contacts:  NewContactsClient(cfg),
		Files:     NewFilesClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Addresses: NewAddressesClient(cfg),
		Contacts:  NewContactsClient(cfg),
		Files:     NewFilesClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Addresses.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Addresses.Use(hooks...)
	c.Contacts.Use(hooks...)
	c.Files.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Addresses.Intercept(interceptors...)
	c.Contacts.Intercept(interceptors...)
	c.Files.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AddressesMutation:
		return c.Addresses.mutate(ctx, m)
	case *ContactsMutation:
		return c.Contacts.mutate(ctx, m)
	case *FilesMutation:
		return c.Files.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AddressesClient is a client for the Addresses schema.
type AddressesClient struct {
	config
}

// NewAddressesClient returns a client for the Addresses from the given config.
func NewAddressesClient(c config) *AddressesClient {
	return &AddressesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `addresses.Hooks(f(g(h())))`.
func (c *AddressesClient) Use(hooks ...Hook) {
	c.hooks.Addresses = append(c.hooks.Addresses, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `addresses.Intercept(f(g(h())))`.
func (c *AddressesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Addresses = append(c.inters.Addresses, interceptors...)
}

// Create returns a builder for creating a Addresses entity.
func (c *AddressesClient) Create() *AddressesCreate {
	mutation := newAddressesMutation(c.config, OpCreate)
	return &AddressesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Addresses entities.
func (c *AddressesClient) CreateBulk(builders ...*AddressesCreate) *AddressesCreateBulk {
	return &AddressesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddressesClient) MapCreateBulk(slice any, setFunc func(*AddressesCreate, int)) *AddressesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddressesCreateBulk{err: fmt.Errorf("calling to AddressesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddressesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddressesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Addresses.
func (c *AddressesClient) Update() *AddressesUpdate {
	mutation := newAddressesMutation(c.config, OpUpdate)
	return &AddressesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressesClient) UpdateOne(a *Addresses) *AddressesUpdateOne {
	mutation := newAddressesMutation(c.config, OpUpdateOne, withAddresses(a))
	return &AddressesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressesClient) UpdateOneID(id int) *AddressesUpdateOne {
	mutation := newAddressesMutation(c.config, OpUpdateOne, withAddressesID(id))
	return &AddressesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Addresses.
func (c *AddressesClient) Delete() *AddressesDelete {
	mutation := newAddressesMutation(c.config, OpDelete)
	return &AddressesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressesClient) DeleteOne(a *Addresses) *AddressesDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddressesClient) DeleteOneID(id int) *AddressesDeleteOne {
	builder := c.Delete().Where(addresses.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressesDeleteOne{builder}
}

// Query returns a query builder for Addresses.
func (c *AddressesClient) Query() *AddressesQuery {
	return &AddressesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddresses},
		inters: c.Interceptors(),
	}
}

// Get returns a Addresses entity by its id.
func (c *AddressesClient) Get(ctx context.Context, id int) (*Addresses, error) {
	return c.Query().Where(addresses.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressesClient) GetX(ctx context.Context, id int) *Addresses {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContact queries the contact edge of a Addresses.
func (c *AddressesClient) QueryContact(a *Addresses) *ContactsQuery {
	query := (&ContactsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addresses.Table, addresses.FieldID, id),
			sqlgraph.To(contacts.Table, contacts.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, addresses.ContactTable, addresses.ContactColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressesClient) Hooks() []Hook {
	return c.hooks.Addresses
}

// Interceptors returns the client interceptors.
func (c *AddressesClient) Interceptors() []Interceptor {
	return c.inters.Addresses
}

func (c *AddressesClient) mutate(ctx context.Context, m *AddressesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddressesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddressesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddressesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddressesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Addresses mutation op: %q", m.Op())
	}
}

// ContactsClient is a client for the Contacts schema.
type ContactsClient struct {
	config
}

// NewContactsClient returns a client for the Contacts from the given config.
func NewContactsClient(c config) *ContactsClient {
	return &ContactsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contacts.Hooks(f(g(h())))`.
func (c *ContactsClient) Use(hooks ...Hook) {
	c.hooks.Contacts = append(c.hooks.Contacts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contacts.Intercept(f(g(h())))`.
func (c *ContactsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contacts = append(c.inters.Contacts, interceptors...)
}

// Create returns a builder for creating a Contacts entity.
func (c *ContactsClient) Create() *ContactsCreate {
	mutation := newContactsMutation(c.config, OpCreate)
	return &ContactsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contacts entities.
func (c *ContactsClient) CreateBulk(builders ...*ContactsCreate) *ContactsCreateBulk {
	return &ContactsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContactsClient) MapCreateBulk(slice any, setFunc func(*ContactsCreate, int)) *ContactsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContactsCreateBulk{err: fmt.Errorf("calling to ContactsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContactsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContactsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contacts.
func (c *ContactsClient) Update() *ContactsUpdate {
	mutation := newContactsMutation(c.config, OpUpdate)
	return &ContactsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactsClient) UpdateOne(co *Contacts) *ContactsUpdateOne {
	mutation := newContactsMutation(c.config, OpUpdateOne, withContacts(co))
	return &ContactsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactsClient) UpdateOneID(id int) *ContactsUpdateOne {
	mutation := newContactsMutation(c.config, OpUpdateOne, withContactsID(id))
	return &ContactsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contacts.
func (c *ContactsClient) Delete() *ContactsDelete {
	mutation := newContactsMutation(c.config, OpDelete)
	return &ContactsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContactsClient) DeleteOne(co *Contacts) *ContactsDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContactsClient) DeleteOneID(id int) *ContactsDeleteOne {
	builder := c.Delete().Where(contacts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactsDeleteOne{builder}
}

// Query returns a query builder for Contacts.
func (c *ContactsClient) Query() *ContactsQuery {
	return &ContactsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContacts},
		inters: c.Interceptors(),
	}
}

// Get returns a Contacts entity by its id.
func (c *ContactsClient) Get(ctx context.Context, id int) (*Contacts, error) {
	return c.Query().Where(contacts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactsClient) GetX(ctx context.Context, id int) *Contacts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAddresses queries the addresses edge of a Contacts.
func (c *ContactsClient) QueryAddresses(co *Contacts) *AddressesQuery {
	query := (&AddressesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contacts.Table, contacts.FieldID, id),
			sqlgraph.To(addresses.Table, addresses.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, contacts.AddressesTable, contacts.AddressesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a Contacts.
func (c *ContactsClient) QueryFiles(co *Contacts) *FilesQuery {
	query := (&FilesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contacts.Table, contacts.FieldID, id),
			sqlgraph.To(files.Table, files.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, contacts.FilesTable, contacts.FilesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContactsClient) Hooks() []Hook {
	return c.hooks.Contacts
}

// Interceptors returns the client interceptors.
func (c *ContactsClient) Interceptors() []Interceptor {
	return c.inters.Contacts
}

func (c *ContactsClient) mutate(ctx context.Context, m *ContactsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContactsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContactsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContactsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContactsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Contacts mutation op: %q", m.Op())
	}
}

// FilesClient is a client for the Files schema.
type FilesClient struct {
	config
}

// NewFilesClient returns a client for the Files from the given config.
func NewFilesClient(c config) *FilesClient {
	return &FilesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `files.Hooks(f(g(h())))`.
func (c *FilesClient) Use(hooks ...Hook) {
	c.hooks.Files = append(c.hooks.Files, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `files.Intercept(f(g(h())))`.
func (c *FilesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Files = append(c.inters.Files, interceptors...)
}

// Create returns a builder for creating a Files entity.
func (c *FilesClient) Create() *FilesCreate {
	mutation := newFilesMutation(c.config, OpCreate)
	return &FilesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Files entities.
func (c *FilesClient) CreateBulk(builders ...*FilesCreate) *FilesCreateBulk {
	return &FilesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FilesClient) MapCreateBulk(slice any, setFunc func(*FilesCreate, int)) *FilesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FilesCreateBulk{err: fmt.Errorf("calling to FilesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FilesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FilesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Files.
func (c *FilesClient) Update() *FilesUpdate {
	mutation := newFilesMutation(c.config, OpUpdate)
	return &FilesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FilesClient) UpdateOne(f *Files) *FilesUpdateOne {
	mutation := newFilesMutation(c.config, OpUpdateOne, withFiles(f))
	return &FilesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FilesClient) UpdateOneID(id int) *FilesUpdateOne {
	mutation := newFilesMutation(c.config, OpUpdateOne, withFilesID(id))
	return &FilesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Files.
func (c *FilesClient) Delete() *FilesDelete {
	mutation := newFilesMutation(c.config, OpDelete)
	return &FilesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FilesClient) DeleteOne(f *Files) *FilesDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FilesClient) DeleteOneID(id int) *FilesDeleteOne {
	builder := c.Delete().Where(files.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FilesDeleteOne{builder}
}

// Query returns a query builder for Files.
func (c *FilesClient) Query() *FilesQuery {
	return &FilesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFiles},
		inters: c.Interceptors(),
	}
}

// Get returns a Files entity by its id.
func (c *FilesClient) Get(ctx context.Context, id int) (*Files, error) {
	return c.Query().Where(files.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FilesClient) GetX(ctx context.Context, id int) *Files {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContacts queries the contacts edge of a Files.
func (c *FilesClient) QueryContacts(f *Files) *ContactsQuery {
	query := (&ContactsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(files.Table, files.FieldID, id),
			sqlgraph.To(contacts.Table, contacts.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, files.ContactsTable, files.ContactsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FilesClient) Hooks() []Hook {
	return c.hooks.Files
}

// Interceptors returns the client interceptors.
func (c *FilesClient) Interceptors() []Interceptor {
	return c.inters.Files
}

func (c *FilesClient) mutate(ctx context.Context, m *FilesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FilesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FilesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FilesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FilesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Files mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Addresses, Contacts, Files []ent.Hook
	}
	inters struct {
		Addresses, Contacts, Files []ent.Interceptor
	}
)
