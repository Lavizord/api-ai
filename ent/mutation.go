// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/addresses"
	"api-ai/ent/contacts"
	"api-ai/ent/files"
	"api-ai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAddresses = "Addresses"
	TypeContacts  = "Contacts"
	TypeFiles     = "Files"
)

// AddressesMutation represents an operation that mutates the Addresses nodes in the graph.
type AddressesMutation struct {
	config
	op              Op
	typ             string
	id              *int
	street_name     *string
	number          *string
	floor           *string
	postal_code     *string
	city            *string
	invoice_address *bool
	service_address *bool
	created_at      *time.Time
	clearedFields   map[string]struct{}
	contact         *int
	clearedcontact  bool
	done            bool
	oldValue        func(context.Context) (*Addresses, error)
	predicates      []predicate.Addresses
}

var _ ent.Mutation = (*AddressesMutation)(nil)

// addressesOption allows management of the mutation configuration using functional options.
type addressesOption func(*AddressesMutation)

// newAddressesMutation creates new mutation for the Addresses entity.
func newAddressesMutation(c config, op Op, opts ...addressesOption) *AddressesMutation {
	m := &AddressesMutation{
		config:        c,
		op:            op,
		typ:           TypeAddresses,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAddressesID sets the ID field of the mutation.
func withAddressesID(id int) addressesOption {
	return func(m *AddressesMutation) {
		var (
			err   error
			once  sync.Once
			value *Addresses
		)
		m.oldValue = func(ctx context.Context) (*Addresses, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Addresses.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAddresses sets the old Addresses of the mutation.
func withAddresses(node *Addresses) addressesOption {
	return func(m *AddressesMutation) {
		m.oldValue = func(context.Context) (*Addresses, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AddressesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AddressesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AddressesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AddressesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Addresses.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStreetName sets the "street_name" field.
func (m *AddressesMutation) SetStreetName(s string) {
	m.street_name = &s
}

// StreetName returns the value of the "street_name" field in the mutation.
func (m *AddressesMutation) StreetName() (r string, exists bool) {
	v := m.street_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStreetName returns the old "street_name" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldStreetName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreetName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreetName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreetName: %w", err)
	}
	return oldValue.StreetName, nil
}

// ResetStreetName resets all changes to the "street_name" field.
func (m *AddressesMutation) ResetStreetName() {
	m.street_name = nil
}

// SetNumber sets the "number" field.
func (m *AddressesMutation) SetNumber(s string) {
	m.number = &s
}

// Number returns the value of the "number" field in the mutation.
func (m *AddressesMutation) Number() (r string, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// ResetNumber resets all changes to the "number" field.
func (m *AddressesMutation) ResetNumber() {
	m.number = nil
}

// SetFloor sets the "floor" field.
func (m *AddressesMutation) SetFloor(s string) {
	m.floor = &s
}

// Floor returns the value of the "floor" field in the mutation.
func (m *AddressesMutation) Floor() (r string, exists bool) {
	v := m.floor
	if v == nil {
		return
	}
	return *v, true
}

// OldFloor returns the old "floor" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldFloor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloor: %w", err)
	}
	return oldValue.Floor, nil
}

// ClearFloor clears the value of the "floor" field.
func (m *AddressesMutation) ClearFloor() {
	m.floor = nil
	m.clearedFields[addresses.FieldFloor] = struct{}{}
}

// FloorCleared returns if the "floor" field was cleared in this mutation.
func (m *AddressesMutation) FloorCleared() bool {
	_, ok := m.clearedFields[addresses.FieldFloor]
	return ok
}

// ResetFloor resets all changes to the "floor" field.
func (m *AddressesMutation) ResetFloor() {
	m.floor = nil
	delete(m.clearedFields, addresses.FieldFloor)
}

// SetPostalCode sets the "postal_code" field.
func (m *AddressesMutation) SetPostalCode(s string) {
	m.postal_code = &s
}

// PostalCode returns the value of the "postal_code" field in the mutation.
func (m *AddressesMutation) PostalCode() (r string, exists bool) {
	v := m.postal_code
	if v == nil {
		return
	}
	return *v, true
}

// OldPostalCode returns the old "postal_code" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldPostalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostalCode: %w", err)
	}
	return oldValue.PostalCode, nil
}

// ResetPostalCode resets all changes to the "postal_code" field.
func (m *AddressesMutation) ResetPostalCode() {
	m.postal_code = nil
}

// SetCity sets the "city" field.
func (m *AddressesMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *AddressesMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *AddressesMutation) ResetCity() {
	m.city = nil
}

// SetInvoiceAddress sets the "invoice_address" field.
func (m *AddressesMutation) SetInvoiceAddress(b bool) {
	m.invoice_address = &b
}

// InvoiceAddress returns the value of the "invoice_address" field in the mutation.
func (m *AddressesMutation) InvoiceAddress() (r bool, exists bool) {
	v := m.invoice_address
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceAddress returns the old "invoice_address" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldInvoiceAddress(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceAddress: %w", err)
	}
	return oldValue.InvoiceAddress, nil
}

// ResetInvoiceAddress resets all changes to the "invoice_address" field.
func (m *AddressesMutation) ResetInvoiceAddress() {
	m.invoice_address = nil
}

// SetServiceAddress sets the "service_address" field.
func (m *AddressesMutation) SetServiceAddress(b bool) {
	m.service_address = &b
}

// ServiceAddress returns the value of the "service_address" field in the mutation.
func (m *AddressesMutation) ServiceAddress() (r bool, exists bool) {
	v := m.service_address
	if v == nil {
		return
	}
	return *v, true
}

// OldServiceAddress returns the old "service_address" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldServiceAddress(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServiceAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServiceAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServiceAddress: %w", err)
	}
	return oldValue.ServiceAddress, nil
}

// ResetServiceAddress resets all changes to the "service_address" field.
func (m *AddressesMutation) ResetServiceAddress() {
	m.service_address = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AddressesMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AddressesMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Addresses entity.
// If the Addresses object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AddressesMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AddressesMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetContactID sets the "contact" edge to the Contacts entity by id.
func (m *AddressesMutation) SetContactID(id int) {
	m.contact = &id
}

// ClearContact clears the "contact" edge to the Contacts entity.
func (m *AddressesMutation) ClearContact() {
	m.clearedcontact = true
}

// ContactCleared reports if the "contact" edge to the Contacts entity was cleared.
func (m *AddressesMutation) ContactCleared() bool {
	return m.clearedcontact
}

// ContactID returns the "contact" edge ID in the mutation.
func (m *AddressesMutation) ContactID() (id int, exists bool) {
	if m.contact != nil {
		return *m.contact, true
	}
	return
}

// ContactIDs returns the "contact" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContactID instead. It exists only for internal usage by the builders.
func (m *AddressesMutation) ContactIDs() (ids []int) {
	if id := m.contact; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContact resets all changes to the "contact" edge.
func (m *AddressesMutation) ResetContact() {
	m.contact = nil
	m.clearedcontact = false
}

// Where appends a list predicates to the AddressesMutation builder.
func (m *AddressesMutation) Where(ps ...predicate.Addresses) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AddressesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AddressesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Addresses, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AddressesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AddressesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Addresses).
func (m *AddressesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AddressesMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.street_name != nil {
		fields = append(fields, addresses.FieldStreetName)
	}
	if m.number != nil {
		fields = append(fields, addresses.FieldNumber)
	}
	if m.floor != nil {
		fields = append(fields, addresses.FieldFloor)
	}
	if m.postal_code != nil {
		fields = append(fields, addresses.FieldPostalCode)
	}
	if m.city != nil {
		fields = append(fields, addresses.FieldCity)
	}
	if m.invoice_address != nil {
		fields = append(fields, addresses.FieldInvoiceAddress)
	}
	if m.service_address != nil {
		fields = append(fields, addresses.FieldServiceAddress)
	}
	if m.created_at != nil {
		fields = append(fields, addresses.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AddressesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case addresses.FieldStreetName:
		return m.StreetName()
	case addresses.FieldNumber:
		return m.Number()
	case addresses.FieldFloor:
		return m.Floor()
	case addresses.FieldPostalCode:
		return m.PostalCode()
	case addresses.FieldCity:
		return m.City()
	case addresses.FieldInvoiceAddress:
		return m.InvoiceAddress()
	case addresses.FieldServiceAddress:
		return m.ServiceAddress()
	case addresses.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AddressesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case addresses.FieldStreetName:
		return m.OldStreetName(ctx)
	case addresses.FieldNumber:
		return m.OldNumber(ctx)
	case addresses.FieldFloor:
		return m.OldFloor(ctx)
	case addresses.FieldPostalCode:
		return m.OldPostalCode(ctx)
	case addresses.FieldCity:
		return m.OldCity(ctx)
	case addresses.FieldInvoiceAddress:
		return m.OldInvoiceAddress(ctx)
	case addresses.FieldServiceAddress:
		return m.OldServiceAddress(ctx)
	case addresses.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Addresses field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case addresses.FieldStreetName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreetName(v)
		return nil
	case addresses.FieldNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case addresses.FieldFloor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloor(v)
		return nil
	case addresses.FieldPostalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostalCode(v)
		return nil
	case addresses.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case addresses.FieldInvoiceAddress:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceAddress(v)
		return nil
	case addresses.FieldServiceAddress:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServiceAddress(v)
		return nil
	case addresses.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Addresses field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AddressesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AddressesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AddressesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Addresses numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AddressesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(addresses.FieldFloor) {
		fields = append(fields, addresses.FieldFloor)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AddressesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AddressesMutation) ClearField(name string) error {
	switch name {
	case addresses.FieldFloor:
		m.ClearFloor()
		return nil
	}
	return fmt.Errorf("unknown Addresses nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AddressesMutation) ResetField(name string) error {
	switch name {
	case addresses.FieldStreetName:
		m.ResetStreetName()
		return nil
	case addresses.FieldNumber:
		m.ResetNumber()
		return nil
	case addresses.FieldFloor:
		m.ResetFloor()
		return nil
	case addresses.FieldPostalCode:
		m.ResetPostalCode()
		return nil
	case addresses.FieldCity:
		m.ResetCity()
		return nil
	case addresses.FieldInvoiceAddress:
		m.ResetInvoiceAddress()
		return nil
	case addresses.FieldServiceAddress:
		m.ResetServiceAddress()
		return nil
	case addresses.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Addresses field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AddressesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contact != nil {
		edges = append(edges, addresses.EdgeContact)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AddressesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case addresses.EdgeContact:
		if id := m.contact; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AddressesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AddressesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AddressesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontact {
		edges = append(edges, addresses.EdgeContact)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AddressesMutation) EdgeCleared(name string) bool {
	switch name {
	case addresses.EdgeContact:
		return m.clearedcontact
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AddressesMutation) ClearEdge(name string) error {
	switch name {
	case addresses.EdgeContact:
		m.ClearContact()
		return nil
	}
	return fmt.Errorf("unknown Addresses unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AddressesMutation) ResetEdge(name string) error {
	switch name {
	case addresses.EdgeContact:
		m.ResetContact()
		return nil
	}
	return fmt.Errorf("unknown Addresses edge %s", name)
}

// ContactsMutation represents an operation that mutates the Contacts nodes in the graph.
type ContactsMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	telefone         *string
	email            *string
	vat              *string
	_type            *string
	created_at       *time.Time
	clearedFields    map[string]struct{}
	addresses        map[int]struct{}
	removedaddresses map[int]struct{}
	clearedaddresses bool
	files            map[int]struct{}
	removedfiles     map[int]struct{}
	clearedfiles     bool
	done             bool
	oldValue         func(context.Context) (*Contacts, error)
	predicates       []predicate.Contacts
}

var _ ent.Mutation = (*ContactsMutation)(nil)

// contactsOption allows management of the mutation configuration using functional options.
type contactsOption func(*ContactsMutation)

// newContactsMutation creates new mutation for the Contacts entity.
func newContactsMutation(c config, op Op, opts ...contactsOption) *ContactsMutation {
	m := &ContactsMutation{
		config:        c,
		op:            op,
		typ:           TypeContacts,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContactsID sets the ID field of the mutation.
func withContactsID(id int) contactsOption {
	return func(m *ContactsMutation) {
		var (
			err   error
			once  sync.Once
			value *Contacts
		)
		m.oldValue = func(ctx context.Context) (*Contacts, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contacts.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContacts sets the old Contacts of the mutation.
func withContacts(node *Contacts) contactsOption {
	return func(m *ContactsMutation) {
		m.oldValue = func(context.Context) (*Contacts, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContactsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContactsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContactsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContactsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contacts.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ContactsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ContactsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Contacts entity.
// If the Contacts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ContactsMutation) ResetName() {
	m.name = nil
}

// SetTelefone sets the "telefone" field.
func (m *ContactsMutation) SetTelefone(s string) {
	m.telefone = &s
}

// Telefone returns the value of the "telefone" field in the mutation.
func (m *ContactsMutation) Telefone() (r string, exists bool) {
	v := m.telefone
	if v == nil {
		return
	}
	return *v, true
}

// OldTelefone returns the old "telefone" field's value of the Contacts entity.
// If the Contacts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactsMutation) OldTelefone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelefone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelefone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelefone: %w", err)
	}
	return oldValue.Telefone, nil
}

// ResetTelefone resets all changes to the "telefone" field.
func (m *ContactsMutation) ResetTelefone() {
	m.telefone = nil
}

// SetEmail sets the "email" field.
func (m *ContactsMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *ContactsMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Contacts entity.
// If the Contacts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactsMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *ContactsMutation) ResetEmail() {
	m.email = nil
}

// SetVat sets the "vat" field.
func (m *ContactsMutation) SetVat(s string) {
	m.vat = &s
}

// Vat returns the value of the "vat" field in the mutation.
func (m *ContactsMutation) Vat() (r string, exists bool) {
	v := m.vat
	if v == nil {
		return
	}
	return *v, true
}

// OldVat returns the old "vat" field's value of the Contacts entity.
// If the Contacts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactsMutation) OldVat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVat: %w", err)
	}
	return oldValue.Vat, nil
}

// ResetVat resets all changes to the "vat" field.
func (m *ContactsMutation) ResetVat() {
	m.vat = nil
}

// SetType sets the "type" field.
func (m *ContactsMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ContactsMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Contacts entity.
// If the Contacts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactsMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ContactsMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ContactsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContactsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Contacts entity.
// If the Contacts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContactsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddAddressIDs adds the "addresses" edge to the Addresses entity by ids.
func (m *ContactsMutation) AddAddressIDs(ids ...int) {
	if m.addresses == nil {
		m.addresses = make(map[int]struct{})
	}
	for i := range ids {
		m.addresses[ids[i]] = struct{}{}
	}
}

// ClearAddresses clears the "addresses" edge to the Addresses entity.
func (m *ContactsMutation) ClearAddresses() {
	m.clearedaddresses = true
}

// AddressesCleared reports if the "addresses" edge to the Addresses entity was cleared.
func (m *ContactsMutation) AddressesCleared() bool {
	return m.clearedaddresses
}

// RemoveAddressIDs removes the "addresses" edge to the Addresses entity by IDs.
func (m *ContactsMutation) RemoveAddressIDs(ids ...int) {
	if m.removedaddresses == nil {
		m.removedaddresses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.addresses, ids[i])
		m.removedaddresses[ids[i]] = struct{}{}
	}
}

// RemovedAddresses returns the removed IDs of the "addresses" edge to the Addresses entity.
func (m *ContactsMutation) RemovedAddressesIDs() (ids []int) {
	for id := range m.removedaddresses {
		ids = append(ids, id)
	}
	return
}

// AddressesIDs returns the "addresses" edge IDs in the mutation.
func (m *ContactsMutation) AddressesIDs() (ids []int) {
	for id := range m.addresses {
		ids = append(ids, id)
	}
	return
}

// ResetAddresses resets all changes to the "addresses" edge.
func (m *ContactsMutation) ResetAddresses() {
	m.addresses = nil
	m.clearedaddresses = false
	m.removedaddresses = nil
}

// AddFileIDs adds the "files" edge to the Files entity by ids.
func (m *ContactsMutation) AddFileIDs(ids ...int) {
	if m.files == nil {
		m.files = make(map[int]struct{})
	}
	for i := range ids {
		m.files[ids[i]] = struct{}{}
	}
}

// ClearFiles clears the "files" edge to the Files entity.
func (m *ContactsMutation) ClearFiles() {
	m.clearedfiles = true
}

// FilesCleared reports if the "files" edge to the Files entity was cleared.
func (m *ContactsMutation) FilesCleared() bool {
	return m.clearedfiles
}

// RemoveFileIDs removes the "files" edge to the Files entity by IDs.
func (m *ContactsMutation) RemoveFileIDs(ids ...int) {
	if m.removedfiles == nil {
		m.removedfiles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.files, ids[i])
		m.removedfiles[ids[i]] = struct{}{}
	}
}

// RemovedFiles returns the removed IDs of the "files" edge to the Files entity.
func (m *ContactsMutation) RemovedFilesIDs() (ids []int) {
	for id := range m.removedfiles {
		ids = append(ids, id)
	}
	return
}

// FilesIDs returns the "files" edge IDs in the mutation.
func (m *ContactsMutation) FilesIDs() (ids []int) {
	for id := range m.files {
		ids = append(ids, id)
	}
	return
}

// ResetFiles resets all changes to the "files" edge.
func (m *ContactsMutation) ResetFiles() {
	m.files = nil
	m.clearedfiles = false
	m.removedfiles = nil
}

// Where appends a list predicates to the ContactsMutation builder.
func (m *ContactsMutation) Where(ps ...predicate.Contacts) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContactsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContactsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Contacts, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContactsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContactsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Contacts).
func (m *ContactsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContactsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, contacts.FieldName)
	}
	if m.telefone != nil {
		fields = append(fields, contacts.FieldTelefone)
	}
	if m.email != nil {
		fields = append(fields, contacts.FieldEmail)
	}
	if m.vat != nil {
		fields = append(fields, contacts.FieldVat)
	}
	if m._type != nil {
		fields = append(fields, contacts.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, contacts.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContactsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contacts.FieldName:
		return m.Name()
	case contacts.FieldTelefone:
		return m.Telefone()
	case contacts.FieldEmail:
		return m.Email()
	case contacts.FieldVat:
		return m.Vat()
	case contacts.FieldType:
		return m.GetType()
	case contacts.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContactsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contacts.FieldName:
		return m.OldName(ctx)
	case contacts.FieldTelefone:
		return m.OldTelefone(ctx)
	case contacts.FieldEmail:
		return m.OldEmail(ctx)
	case contacts.FieldVat:
		return m.OldVat(ctx)
	case contacts.FieldType:
		return m.OldType(ctx)
	case contacts.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Contacts field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contacts.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case contacts.FieldTelefone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelefone(v)
		return nil
	case contacts.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case contacts.FieldVat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVat(v)
		return nil
	case contacts.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case contacts.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Contacts field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContactsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContactsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Contacts numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContactsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContactsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContactsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Contacts nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContactsMutation) ResetField(name string) error {
	switch name {
	case contacts.FieldName:
		m.ResetName()
		return nil
	case contacts.FieldTelefone:
		m.ResetTelefone()
		return nil
	case contacts.FieldEmail:
		m.ResetEmail()
		return nil
	case contacts.FieldVat:
		m.ResetVat()
		return nil
	case contacts.FieldType:
		m.ResetType()
		return nil
	case contacts.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Contacts field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContactsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.addresses != nil {
		edges = append(edges, contacts.EdgeAddresses)
	}
	if m.files != nil {
		edges = append(edges, contacts.EdgeFiles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContactsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contacts.EdgeAddresses:
		ids := make([]ent.Value, 0, len(m.addresses))
		for id := range m.addresses {
			ids = append(ids, id)
		}
		return ids
	case contacts.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.files))
		for id := range m.files {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContactsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedaddresses != nil {
		edges = append(edges, contacts.EdgeAddresses)
	}
	if m.removedfiles != nil {
		edges = append(edges, contacts.EdgeFiles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContactsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case contacts.EdgeAddresses:
		ids := make([]ent.Value, 0, len(m.removedaddresses))
		for id := range m.removedaddresses {
			ids = append(ids, id)
		}
		return ids
	case contacts.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.removedfiles))
		for id := range m.removedfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContactsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedaddresses {
		edges = append(edges, contacts.EdgeAddresses)
	}
	if m.clearedfiles {
		edges = append(edges, contacts.EdgeFiles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContactsMutation) EdgeCleared(name string) bool {
	switch name {
	case contacts.EdgeAddresses:
		return m.clearedaddresses
	case contacts.EdgeFiles:
		return m.clearedfiles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContactsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Contacts unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContactsMutation) ResetEdge(name string) error {
	switch name {
	case contacts.EdgeAddresses:
		m.ResetAddresses()
		return nil
	case contacts.EdgeFiles:
		m.ResetFiles()
		return nil
	}
	return fmt.Errorf("unknown Contacts edge %s", name)
}

// FilesMutation represents an operation that mutates the Files nodes in the graph.
type FilesMutation struct {
	config
	op              Op
	typ             string
	id              *int
	file_source     *string
	file_name       *string
	file_url        *string
	prompt_used     *string
	created_at      *time.Time
	_type           *string
	clearedFields   map[string]struct{}
	contacts        map[int]struct{}
	removedcontacts map[int]struct{}
	clearedcontacts bool
	done            bool
	oldValue        func(context.Context) (*Files, error)
	predicates      []predicate.Files
}

var _ ent.Mutation = (*FilesMutation)(nil)

// filesOption allows management of the mutation configuration using functional options.
type filesOption func(*FilesMutation)

// newFilesMutation creates new mutation for the Files entity.
func newFilesMutation(c config, op Op, opts ...filesOption) *FilesMutation {
	m := &FilesMutation{
		config:        c,
		op:            op,
		typ:           TypeFiles,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFilesID sets the ID field of the mutation.
func withFilesID(id int) filesOption {
	return func(m *FilesMutation) {
		var (
			err   error
			once  sync.Once
			value *Files
		)
		m.oldValue = func(ctx context.Context) (*Files, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Files.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFiles sets the old Files of the mutation.
func withFiles(node *Files) filesOption {
	return func(m *FilesMutation) {
		m.oldValue = func(context.Context) (*Files, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FilesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FilesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FilesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FilesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Files.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFileSource sets the "file_source" field.
func (m *FilesMutation) SetFileSource(s string) {
	m.file_source = &s
}

// FileSource returns the value of the "file_source" field in the mutation.
func (m *FilesMutation) FileSource() (r string, exists bool) {
	v := m.file_source
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSource returns the old "file_source" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldFileSource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSource: %w", err)
	}
	return oldValue.FileSource, nil
}

// ResetFileSource resets all changes to the "file_source" field.
func (m *FilesMutation) ResetFileSource() {
	m.file_source = nil
}

// SetFileName sets the "file_name" field.
func (m *FilesMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *FilesMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *FilesMutation) ResetFileName() {
	m.file_name = nil
}

// SetFileURL sets the "file_url" field.
func (m *FilesMutation) SetFileURL(s string) {
	m.file_url = &s
}

// FileURL returns the value of the "file_url" field in the mutation.
func (m *FilesMutation) FileURL() (r string, exists bool) {
	v := m.file_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFileURL returns the old "file_url" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldFileURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileURL: %w", err)
	}
	return oldValue.FileURL, nil
}

// ClearFileURL clears the value of the "file_url" field.
func (m *FilesMutation) ClearFileURL() {
	m.file_url = nil
	m.clearedFields[files.FieldFileURL] = struct{}{}
}

// FileURLCleared returns if the "file_url" field was cleared in this mutation.
func (m *FilesMutation) FileURLCleared() bool {
	_, ok := m.clearedFields[files.FieldFileURL]
	return ok
}

// ResetFileURL resets all changes to the "file_url" field.
func (m *FilesMutation) ResetFileURL() {
	m.file_url = nil
	delete(m.clearedFields, files.FieldFileURL)
}

// SetPromptUsed sets the "prompt_used" field.
func (m *FilesMutation) SetPromptUsed(s string) {
	m.prompt_used = &s
}

// PromptUsed returns the value of the "prompt_used" field in the mutation.
func (m *FilesMutation) PromptUsed() (r string, exists bool) {
	v := m.prompt_used
	if v == nil {
		return
	}
	return *v, true
}

// OldPromptUsed returns the old "prompt_used" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldPromptUsed(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPromptUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPromptUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPromptUsed: %w", err)
	}
	return oldValue.PromptUsed, nil
}

// ResetPromptUsed resets all changes to the "prompt_used" field.
func (m *FilesMutation) ResetPromptUsed() {
	m.prompt_used = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FilesMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FilesMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FilesMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetType sets the "type" field.
func (m *FilesMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *FilesMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Files entity.
// If the Files object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilesMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *FilesMutation) ResetType() {
	m._type = nil
}

// AddContactIDs adds the "contacts" edge to the Contacts entity by ids.
func (m *FilesMutation) AddContactIDs(ids ...int) {
	if m.contacts == nil {
		m.contacts = make(map[int]struct{})
	}
	for i := range ids {
		m.contacts[ids[i]] = struct{}{}
	}
}

// ClearContacts clears the "contacts" edge to the Contacts entity.
func (m *FilesMutation) ClearContacts() {
	m.clearedcontacts = true
}

// ContactsCleared reports if the "contacts" edge to the Contacts entity was cleared.
func (m *FilesMutation) ContactsCleared() bool {
	return m.clearedcontacts
}

// RemoveContactIDs removes the "contacts" edge to the Contacts entity by IDs.
func (m *FilesMutation) RemoveContactIDs(ids ...int) {
	if m.removedcontacts == nil {
		m.removedcontacts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contacts, ids[i])
		m.removedcontacts[ids[i]] = struct{}{}
	}
}

// RemovedContacts returns the removed IDs of the "contacts" edge to the Contacts entity.
func (m *FilesMutation) RemovedContactsIDs() (ids []int) {
	for id := range m.removedcontacts {
		ids = append(ids, id)
	}
	return
}

// ContactsIDs returns the "contacts" edge IDs in the mutation.
func (m *FilesMutation) ContactsIDs() (ids []int) {
	for id := range m.contacts {
		ids = append(ids, id)
	}
	return
}

// ResetContacts resets all changes to the "contacts" edge.
func (m *FilesMutation) ResetContacts() {
	m.contacts = nil
	m.clearedcontacts = false
	m.removedcontacts = nil
}

// Where appends a list predicates to the FilesMutation builder.
func (m *FilesMutation) Where(ps ...predicate.Files) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FilesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FilesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Files, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FilesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FilesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Files).
func (m *FilesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FilesMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.file_source != nil {
		fields = append(fields, files.FieldFileSource)
	}
	if m.file_name != nil {
		fields = append(fields, files.FieldFileName)
	}
	if m.file_url != nil {
		fields = append(fields, files.FieldFileURL)
	}
	if m.prompt_used != nil {
		fields = append(fields, files.FieldPromptUsed)
	}
	if m.created_at != nil {
		fields = append(fields, files.FieldCreatedAt)
	}
	if m._type != nil {
		fields = append(fields, files.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FilesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case files.FieldFileSource:
		return m.FileSource()
	case files.FieldFileName:
		return m.FileName()
	case files.FieldFileURL:
		return m.FileURL()
	case files.FieldPromptUsed:
		return m.PromptUsed()
	case files.FieldCreatedAt:
		return m.CreatedAt()
	case files.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FilesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case files.FieldFileSource:
		return m.OldFileSource(ctx)
	case files.FieldFileName:
		return m.OldFileName(ctx)
	case files.FieldFileURL:
		return m.OldFileURL(ctx)
	case files.FieldPromptUsed:
		return m.OldPromptUsed(ctx)
	case files.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case files.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Files field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case files.FieldFileSource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSource(v)
		return nil
	case files.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case files.FieldFileURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileURL(v)
		return nil
	case files.FieldPromptUsed:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPromptUsed(v)
		return nil
	case files.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case files.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Files field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FilesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FilesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Files numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FilesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(files.FieldFileURL) {
		fields = append(fields, files.FieldFileURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FilesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FilesMutation) ClearField(name string) error {
	switch name {
	case files.FieldFileURL:
		m.ClearFileURL()
		return nil
	}
	return fmt.Errorf("unknown Files nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FilesMutation) ResetField(name string) error {
	switch name {
	case files.FieldFileSource:
		m.ResetFileSource()
		return nil
	case files.FieldFileName:
		m.ResetFileName()
		return nil
	case files.FieldFileURL:
		m.ResetFileURL()
		return nil
	case files.FieldPromptUsed:
		m.ResetPromptUsed()
		return nil
	case files.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case files.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Files field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FilesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contacts != nil {
		edges = append(edges, files.EdgeContacts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FilesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case files.EdgeContacts:
		ids := make([]ent.Value, 0, len(m.contacts))
		for id := range m.contacts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FilesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcontacts != nil {
		edges = append(edges, files.EdgeContacts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FilesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case files.EdgeContacts:
		ids := make([]ent.Value, 0, len(m.removedcontacts))
		for id := range m.removedcontacts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FilesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontacts {
		edges = append(edges, files.EdgeContacts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FilesMutation) EdgeCleared(name string) bool {
	switch name {
	case files.EdgeContacts:
		return m.clearedcontacts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FilesMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Files unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FilesMutation) ResetEdge(name string) error {
	switch name {
	case files.EdgeContacts:
		m.ResetContacts()
		return nil
	}
	return fmt.Errorf("unknown Files edge %s", name)
}
