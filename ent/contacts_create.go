// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/addresses"
	"api-ai/ent/contacts"
	"api-ai/ent/files"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactsCreate is the builder for creating a Contacts entity.
type ContactsCreate struct {
	config
	mutation *ContactsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *ContactsCreate) SetName(s string) *ContactsCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetTelefone sets the "telefone" field.
func (cc *ContactsCreate) SetTelefone(s string) *ContactsCreate {
	cc.mutation.SetTelefone(s)
	return cc
}

// SetEmail sets the "email" field.
func (cc *ContactsCreate) SetEmail(s string) *ContactsCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetVat sets the "vat" field.
func (cc *ContactsCreate) SetVat(s string) *ContactsCreate {
	cc.mutation.SetVat(s)
	return cc
}

// SetType sets the "type" field.
func (cc *ContactsCreate) SetType(s string) *ContactsCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContactsCreate) SetCreatedAt(t time.Time) *ContactsCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContactsCreate) SetNillableCreatedAt(t *time.Time) *ContactsCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// AddAddressIDs adds the "addresses" edge to the Addresses entity by IDs.
func (cc *ContactsCreate) AddAddressIDs(ids ...int) *ContactsCreate {
	cc.mutation.AddAddressIDs(ids...)
	return cc
}

// AddAddresses adds the "addresses" edges to the Addresses entity.
func (cc *ContactsCreate) AddAddresses(a ...*Addresses) *ContactsCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAddressIDs(ids...)
}

// AddFileIDs adds the "files" edge to the Files entity by IDs.
func (cc *ContactsCreate) AddFileIDs(ids ...int) *ContactsCreate {
	cc.mutation.AddFileIDs(ids...)
	return cc
}

// AddFiles adds the "files" edges to the Files entity.
func (cc *ContactsCreate) AddFiles(f ...*Files) *ContactsCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cc.AddFileIDs(ids...)
}

// Mutation returns the ContactsMutation object of the builder.
func (cc *ContactsCreate) Mutation() *ContactsMutation {
	return cc.mutation
}

// Save creates the Contacts in the database.
func (cc *ContactsCreate) Save(ctx context.Context) (*Contacts, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactsCreate) SaveX(ctx context.Context) *Contacts {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactsCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactsCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContactsCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := contacts.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactsCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Contacts.name"`)}
	}
	if _, ok := cc.mutation.Telefone(); !ok {
		return &ValidationError{Name: "telefone", err: errors.New(`ent: missing required field "Contacts.telefone"`)}
	}
	if _, ok := cc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Contacts.email"`)}
	}
	if _, ok := cc.mutation.Vat(); !ok {
		return &ValidationError{Name: "vat", err: errors.New(`ent: missing required field "Contacts.vat"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Contacts.type"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Contacts.created_at"`)}
	}
	return nil
}

func (cc *ContactsCreate) sqlSave(ctx context.Context) (*Contacts, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContactsCreate) createSpec() (*Contacts, *sqlgraph.CreateSpec) {
	var (
		_node = &Contacts{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contacts.Table, sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(contacts.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Telefone(); ok {
		_spec.SetField(contacts.FieldTelefone, field.TypeString, value)
		_node.Telefone = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(contacts.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cc.mutation.Vat(); ok {
		_spec.SetField(contacts.FieldVat, field.TypeString, value)
		_node.Vat = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(contacts.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(contacts.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cc.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contacts.AddressesTable,
			Columns: []string{contacts.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contacts.FilesTable,
			Columns: contacts.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContactsCreateBulk is the builder for creating many Contacts entities in bulk.
type ContactsCreateBulk struct {
	config
	err      error
	builders []*ContactsCreate
}

// Save creates the Contacts entities in the database.
func (ccb *ContactsCreateBulk) Save(ctx context.Context) ([]*Contacts, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contacts, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactsCreateBulk) SaveX(ctx context.Context) []*Contacts {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactsCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactsCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
