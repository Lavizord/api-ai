// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/contacts"
	"api-ai/ent/files"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FilesCreate is the builder for creating a Files entity.
type FilesCreate struct {
	config
	mutation *FilesMutation
	hooks    []Hook
}

// SetFileSource sets the "file_source" field.
func (fc *FilesCreate) SetFileSource(s string) *FilesCreate {
	fc.mutation.SetFileSource(s)
	return fc
}

// SetFileName sets the "file_name" field.
func (fc *FilesCreate) SetFileName(s string) *FilesCreate {
	fc.mutation.SetFileName(s)
	return fc
}

// SetFileURL sets the "file_url" field.
func (fc *FilesCreate) SetFileURL(s string) *FilesCreate {
	fc.mutation.SetFileURL(s)
	return fc
}

// SetNillableFileURL sets the "file_url" field if the given value is not nil.
func (fc *FilesCreate) SetNillableFileURL(s *string) *FilesCreate {
	if s != nil {
		fc.SetFileURL(*s)
	}
	return fc
}

// SetFileData sets the "file_data" field.
func (fc *FilesCreate) SetFileData(b []byte) *FilesCreate {
	fc.mutation.SetFileData(b)
	return fc
}

// SetPromptUsed sets the "prompt_used" field.
func (fc *FilesCreate) SetPromptUsed(s string) *FilesCreate {
	fc.mutation.SetPromptUsed(s)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FilesCreate) SetCreatedAt(t time.Time) *FilesCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FilesCreate) SetNillableCreatedAt(t *time.Time) *FilesCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetType sets the "type" field.
func (fc *FilesCreate) SetType(s string) *FilesCreate {
	fc.mutation.SetType(s)
	return fc
}

// AddContactIDs adds the "contacts" edge to the Contacts entity by IDs.
func (fc *FilesCreate) AddContactIDs(ids ...int) *FilesCreate {
	fc.mutation.AddContactIDs(ids...)
	return fc
}

// AddContacts adds the "contacts" edges to the Contacts entity.
func (fc *FilesCreate) AddContacts(c ...*Contacts) *FilesCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fc.AddContactIDs(ids...)
}

// Mutation returns the FilesMutation object of the builder.
func (fc *FilesCreate) Mutation() *FilesMutation {
	return fc.mutation
}

// Save creates the Files in the database.
func (fc *FilesCreate) Save(ctx context.Context) (*Files, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FilesCreate) SaveX(ctx context.Context) *Files {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FilesCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FilesCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FilesCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := files.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FilesCreate) check() error {
	if _, ok := fc.mutation.FileSource(); !ok {
		return &ValidationError{Name: "file_source", err: errors.New(`ent: missing required field "Files.file_source"`)}
	}
	if _, ok := fc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "Files.file_name"`)}
	}
	if _, ok := fc.mutation.PromptUsed(); !ok {
		return &ValidationError{Name: "prompt_used", err: errors.New(`ent: missing required field "Files.prompt_used"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Files.created_at"`)}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Files.type"`)}
	}
	return nil
}

func (fc *FilesCreate) sqlSave(ctx context.Context) (*Files, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FilesCreate) createSpec() (*Files, *sqlgraph.CreateSpec) {
	var (
		_node = &Files{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(files.Table, sqlgraph.NewFieldSpec(files.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.FileSource(); ok {
		_spec.SetField(files.FieldFileSource, field.TypeString, value)
		_node.FileSource = value
	}
	if value, ok := fc.mutation.FileName(); ok {
		_spec.SetField(files.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := fc.mutation.FileURL(); ok {
		_spec.SetField(files.FieldFileURL, field.TypeString, value)
		_node.FileURL = value
	}
	if value, ok := fc.mutation.FileData(); ok {
		_spec.SetField(files.FieldFileData, field.TypeBytes, value)
		_node.FileData = value
	}
	if value, ok := fc.mutation.PromptUsed(); ok {
		_spec.SetField(files.FieldPromptUsed, field.TypeString, value)
		_node.PromptUsed = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(files.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(files.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := fc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   files.ContactsTable,
			Columns: files.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FilesCreateBulk is the builder for creating many Files entities in bulk.
type FilesCreateBulk struct {
	config
	err      error
	builders []*FilesCreate
}

// Save creates the Files entities in the database.
func (fcb *FilesCreateBulk) Save(ctx context.Context) ([]*Files, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Files, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FilesCreateBulk) SaveX(ctx context.Context) []*Files {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FilesCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FilesCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
