// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/addresses"
	"api-ai/ent/contacts"
	"api-ai/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressesUpdate is the builder for updating Addresses entities.
type AddressesUpdate struct {
	config
	hooks    []Hook
	mutation *AddressesMutation
}

// Where appends a list predicates to the AddressesUpdate builder.
func (au *AddressesUpdate) Where(ps ...predicate.Addresses) *AddressesUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetStreetName sets the "street_name" field.
func (au *AddressesUpdate) SetStreetName(s string) *AddressesUpdate {
	au.mutation.SetStreetName(s)
	return au
}

// SetNillableStreetName sets the "street_name" field if the given value is not nil.
func (au *AddressesUpdate) SetNillableStreetName(s *string) *AddressesUpdate {
	if s != nil {
		au.SetStreetName(*s)
	}
	return au
}

// SetNumber sets the "number" field.
func (au *AddressesUpdate) SetNumber(s string) *AddressesUpdate {
	au.mutation.SetNumber(s)
	return au
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (au *AddressesUpdate) SetNillableNumber(s *string) *AddressesUpdate {
	if s != nil {
		au.SetNumber(*s)
	}
	return au
}

// SetFloor sets the "floor" field.
func (au *AddressesUpdate) SetFloor(s string) *AddressesUpdate {
	au.mutation.SetFloor(s)
	return au
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (au *AddressesUpdate) SetNillableFloor(s *string) *AddressesUpdate {
	if s != nil {
		au.SetFloor(*s)
	}
	return au
}

// ClearFloor clears the value of the "floor" field.
func (au *AddressesUpdate) ClearFloor() *AddressesUpdate {
	au.mutation.ClearFloor()
	return au
}

// SetPostalCode sets the "postal_code" field.
func (au *AddressesUpdate) SetPostalCode(s string) *AddressesUpdate {
	au.mutation.SetPostalCode(s)
	return au
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (au *AddressesUpdate) SetNillablePostalCode(s *string) *AddressesUpdate {
	if s != nil {
		au.SetPostalCode(*s)
	}
	return au
}

// SetCity sets the "city" field.
func (au *AddressesUpdate) SetCity(s string) *AddressesUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (au *AddressesUpdate) SetNillableCity(s *string) *AddressesUpdate {
	if s != nil {
		au.SetCity(*s)
	}
	return au
}

// SetInvoiceAddress sets the "invoice_address" field.
func (au *AddressesUpdate) SetInvoiceAddress(b bool) *AddressesUpdate {
	au.mutation.SetInvoiceAddress(b)
	return au
}

// SetNillableInvoiceAddress sets the "invoice_address" field if the given value is not nil.
func (au *AddressesUpdate) SetNillableInvoiceAddress(b *bool) *AddressesUpdate {
	if b != nil {
		au.SetInvoiceAddress(*b)
	}
	return au
}

// SetServiceAddress sets the "service_address" field.
func (au *AddressesUpdate) SetServiceAddress(b bool) *AddressesUpdate {
	au.mutation.SetServiceAddress(b)
	return au
}

// SetNillableServiceAddress sets the "service_address" field if the given value is not nil.
func (au *AddressesUpdate) SetNillableServiceAddress(b *bool) *AddressesUpdate {
	if b != nil {
		au.SetServiceAddress(*b)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AddressesUpdate) SetCreatedAt(t time.Time) *AddressesUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AddressesUpdate) SetNillableCreatedAt(t *time.Time) *AddressesUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetContactID sets the "contact" edge to the Contacts entity by ID.
func (au *AddressesUpdate) SetContactID(id int) *AddressesUpdate {
	au.mutation.SetContactID(id)
	return au
}

// SetContact sets the "contact" edge to the Contacts entity.
func (au *AddressesUpdate) SetContact(c *Contacts) *AddressesUpdate {
	return au.SetContactID(c.ID)
}

// Mutation returns the AddressesMutation object of the builder.
func (au *AddressesUpdate) Mutation() *AddressesMutation {
	return au.mutation
}

// ClearContact clears the "contact" edge to the Contacts entity.
func (au *AddressesUpdate) ClearContact() *AddressesUpdate {
	au.mutation.ClearContact()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressesUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressesUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressesUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AddressesUpdate) check() error {
	if au.mutation.ContactCleared() && len(au.mutation.ContactIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Addresses.contact"`)
	}
	return nil
}

func (au *AddressesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(addresses.Table, addresses.Columns, sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.StreetName(); ok {
		_spec.SetField(addresses.FieldStreetName, field.TypeString, value)
	}
	if value, ok := au.mutation.Number(); ok {
		_spec.SetField(addresses.FieldNumber, field.TypeString, value)
	}
	if value, ok := au.mutation.Floor(); ok {
		_spec.SetField(addresses.FieldFloor, field.TypeString, value)
	}
	if au.mutation.FloorCleared() {
		_spec.ClearField(addresses.FieldFloor, field.TypeString)
	}
	if value, ok := au.mutation.PostalCode(); ok {
		_spec.SetField(addresses.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := au.mutation.City(); ok {
		_spec.SetField(addresses.FieldCity, field.TypeString, value)
	}
	if value, ok := au.mutation.InvoiceAddress(); ok {
		_spec.SetField(addresses.FieldInvoiceAddress, field.TypeBool, value)
	}
	if value, ok := au.mutation.ServiceAddress(); ok {
		_spec.SetField(addresses.FieldServiceAddress, field.TypeBool, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(addresses.FieldCreatedAt, field.TypeTime, value)
	}
	if au.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addresses.ContactTable,
			Columns: []string{addresses.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addresses.ContactTable,
			Columns: []string{addresses.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addresses.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddressesUpdateOne is the builder for updating a single Addresses entity.
type AddressesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressesMutation
}

// SetStreetName sets the "street_name" field.
func (auo *AddressesUpdateOne) SetStreetName(s string) *AddressesUpdateOne {
	auo.mutation.SetStreetName(s)
	return auo
}

// SetNillableStreetName sets the "street_name" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillableStreetName(s *string) *AddressesUpdateOne {
	if s != nil {
		auo.SetStreetName(*s)
	}
	return auo
}

// SetNumber sets the "number" field.
func (auo *AddressesUpdateOne) SetNumber(s string) *AddressesUpdateOne {
	auo.mutation.SetNumber(s)
	return auo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillableNumber(s *string) *AddressesUpdateOne {
	if s != nil {
		auo.SetNumber(*s)
	}
	return auo
}

// SetFloor sets the "floor" field.
func (auo *AddressesUpdateOne) SetFloor(s string) *AddressesUpdateOne {
	auo.mutation.SetFloor(s)
	return auo
}

// SetNillableFloor sets the "floor" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillableFloor(s *string) *AddressesUpdateOne {
	if s != nil {
		auo.SetFloor(*s)
	}
	return auo
}

// ClearFloor clears the value of the "floor" field.
func (auo *AddressesUpdateOne) ClearFloor() *AddressesUpdateOne {
	auo.mutation.ClearFloor()
	return auo
}

// SetPostalCode sets the "postal_code" field.
func (auo *AddressesUpdateOne) SetPostalCode(s string) *AddressesUpdateOne {
	auo.mutation.SetPostalCode(s)
	return auo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillablePostalCode(s *string) *AddressesUpdateOne {
	if s != nil {
		auo.SetPostalCode(*s)
	}
	return auo
}

// SetCity sets the "city" field.
func (auo *AddressesUpdateOne) SetCity(s string) *AddressesUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillableCity(s *string) *AddressesUpdateOne {
	if s != nil {
		auo.SetCity(*s)
	}
	return auo
}

// SetInvoiceAddress sets the "invoice_address" field.
func (auo *AddressesUpdateOne) SetInvoiceAddress(b bool) *AddressesUpdateOne {
	auo.mutation.SetInvoiceAddress(b)
	return auo
}

// SetNillableInvoiceAddress sets the "invoice_address" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillableInvoiceAddress(b *bool) *AddressesUpdateOne {
	if b != nil {
		auo.SetInvoiceAddress(*b)
	}
	return auo
}

// SetServiceAddress sets the "service_address" field.
func (auo *AddressesUpdateOne) SetServiceAddress(b bool) *AddressesUpdateOne {
	auo.mutation.SetServiceAddress(b)
	return auo
}

// SetNillableServiceAddress sets the "service_address" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillableServiceAddress(b *bool) *AddressesUpdateOne {
	if b != nil {
		auo.SetServiceAddress(*b)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AddressesUpdateOne) SetCreatedAt(t time.Time) *AddressesUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AddressesUpdateOne) SetNillableCreatedAt(t *time.Time) *AddressesUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetContactID sets the "contact" edge to the Contacts entity by ID.
func (auo *AddressesUpdateOne) SetContactID(id int) *AddressesUpdateOne {
	auo.mutation.SetContactID(id)
	return auo
}

// SetContact sets the "contact" edge to the Contacts entity.
func (auo *AddressesUpdateOne) SetContact(c *Contacts) *AddressesUpdateOne {
	return auo.SetContactID(c.ID)
}

// Mutation returns the AddressesMutation object of the builder.
func (auo *AddressesUpdateOne) Mutation() *AddressesMutation {
	return auo.mutation
}

// ClearContact clears the "contact" edge to the Contacts entity.
func (auo *AddressesUpdateOne) ClearContact() *AddressesUpdateOne {
	auo.mutation.ClearContact()
	return auo
}

// Where appends a list predicates to the AddressesUpdate builder.
func (auo *AddressesUpdateOne) Where(ps ...predicate.Addresses) *AddressesUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressesUpdateOne) Select(field string, fields ...string) *AddressesUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Addresses entity.
func (auo *AddressesUpdateOne) Save(ctx context.Context) (*Addresses, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressesUpdateOne) SaveX(ctx context.Context) *Addresses {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressesUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressesUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AddressesUpdateOne) check() error {
	if auo.mutation.ContactCleared() && len(auo.mutation.ContactIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Addresses.contact"`)
	}
	return nil
}

func (auo *AddressesUpdateOne) sqlSave(ctx context.Context) (_node *Addresses, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addresses.Table, addresses.Columns, sqlgraph.NewFieldSpec(addresses.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Addresses.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, addresses.FieldID)
		for _, f := range fields {
			if !addresses.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != addresses.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.StreetName(); ok {
		_spec.SetField(addresses.FieldStreetName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Number(); ok {
		_spec.SetField(addresses.FieldNumber, field.TypeString, value)
	}
	if value, ok := auo.mutation.Floor(); ok {
		_spec.SetField(addresses.FieldFloor, field.TypeString, value)
	}
	if auo.mutation.FloorCleared() {
		_spec.ClearField(addresses.FieldFloor, field.TypeString)
	}
	if value, ok := auo.mutation.PostalCode(); ok {
		_spec.SetField(addresses.FieldPostalCode, field.TypeString, value)
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.SetField(addresses.FieldCity, field.TypeString, value)
	}
	if value, ok := auo.mutation.InvoiceAddress(); ok {
		_spec.SetField(addresses.FieldInvoiceAddress, field.TypeBool, value)
	}
	if value, ok := auo.mutation.ServiceAddress(); ok {
		_spec.SetField(addresses.FieldServiceAddress, field.TypeBool, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(addresses.FieldCreatedAt, field.TypeTime, value)
	}
	if auo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addresses.ContactTable,
			Columns: []string{addresses.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   addresses.ContactTable,
			Columns: []string{addresses.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contacts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Addresses{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addresses.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
