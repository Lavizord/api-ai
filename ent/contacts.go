// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-ai/ent/contacts"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Contacts is the model entity for the Contacts schema.
type Contacts struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Telefone holds the value of the "telefone" field.
	Telefone string `json:"telefone,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Vat holds the value of the "vat" field.
	Vat string `json:"vat,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactsQuery when eager-loading is set.
	Edges        ContactsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContactsEdges holds the relations/edges for other nodes in the graph.
type ContactsEdges struct {
	// Addresses holds the value of the addresses edge.
	Addresses []*Addresses `json:"addresses,omitempty"`
	// Files holds the value of the files edge.
	Files []*Files `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AddressesOrErr returns the Addresses value or an error if the edge
// was not loaded in eager-loading.
func (e ContactsEdges) AddressesOrErr() ([]*Addresses, error) {
	if e.loadedTypes[0] {
		return e.Addresses, nil
	}
	return nil, &NotLoadedError{edge: "addresses"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e ContactsEdges) FilesOrErr() ([]*Files, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contacts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contacts.FieldID:
			values[i] = new(sql.NullInt64)
		case contacts.FieldName, contacts.FieldTelefone, contacts.FieldEmail, contacts.FieldVat, contacts.FieldType:
			values[i] = new(sql.NullString)
		case contacts.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contacts fields.
func (c *Contacts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contacts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case contacts.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case contacts.FieldTelefone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telefone", values[i])
			} else if value.Valid {
				c.Telefone = value.String
			}
		case contacts.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = value.String
			}
		case contacts.FieldVat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vat", values[i])
			} else if value.Valid {
				c.Vat = value.String
			}
		case contacts.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case contacts.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Contacts.
// This includes values selected through modifiers, order, etc.
func (c *Contacts) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryAddresses queries the "addresses" edge of the Contacts entity.
func (c *Contacts) QueryAddresses() *AddressesQuery {
	return NewContactsClient(c.config).QueryAddresses(c)
}

// QueryFiles queries the "files" edge of the Contacts entity.
func (c *Contacts) QueryFiles() *FilesQuery {
	return NewContactsClient(c.config).QueryFiles(c)
}

// Update returns a builder for updating this Contacts.
// Note that you need to call Contacts.Unwrap() before calling this method if this Contacts
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contacts) Update() *ContactsUpdateOne {
	return NewContactsClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Contacts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Contacts) Unwrap() *Contacts {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contacts is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contacts) String() string {
	var builder strings.Builder
	builder.WriteString("Contacts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("telefone=")
	builder.WriteString(c.Telefone)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(c.Email)
	builder.WriteString(", ")
	builder.WriteString("vat=")
	builder.WriteString(c.Vat)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ContactsSlice is a parsable slice of Contacts.
type ContactsSlice []*Contacts
